<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.dockerignore">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.dockerignore" />
              <option name="updatedContent" value="# Docker ignore file to reduce build context size&#10;__pycache__/&#10;*.py[cod]&#10;*$py.class&#10;*.so&#10;.Python&#10;build/&#10;develop-eggs/&#10;dist/&#10;downloads/&#10;eggs/&#10;.eggs/&#10;lib/&#10;lib64/&#10;parts/&#10;sdist/&#10;var/&#10;wheels/&#10;*.egg-info/&#10;.installed.cfg&#10;*.egg&#10;MANIFEST&#10;&#10;# PyInstaller&#10;*.manifest&#10;*.spec&#10;&#10;# Unit test / coverage reports&#10;htmlcov/&#10;.tox/&#10;.nox/&#10;.coverage&#10;.coverage.*&#10;.cache&#10;nosetests.xml&#10;coverage.xml&#10;*.cover&#10;.hypothesis/&#10;.pytest_cache/&#10;&#10;# Environments&#10;.env&#10;.venv&#10;env/&#10;venv/&#10;ENV/&#10;env.bak/&#10;venv.bak/&#10;&#10;# IDE&#10;.vscode/&#10;.idea/&#10;*.swp&#10;*.swo&#10;*~&#10;&#10;# OS&#10;.DS_Store&#10;Thumbs.db&#10;&#10;# Git&#10;.git/&#10;.gitignore&#10;&#10;# Docker&#10;Dockerfile*&#10;docker-compose*&#10;.dockerignore&#10;&#10;# Documentation&#10;*.md&#10;docs/&#10;&#10;# Logs&#10;logs/&#10;*.log" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Dockerfile">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Dockerfile" />
              <option name="updatedContent" value="# Use Python 3.9 slim image as base&#10;FROM python:3.9-slim&#10;&#10;# Set working directory in container&#10;WORKDIR /app&#10;&#10;# Set environment variables&#10;ENV PYTHONDONTWRITEBYTECODE=1&#10;ENV PYTHONUNBUFFERED=1&#10;ENV FLASK_APP=app.py&#10;ENV FLASK_ENV=production&#10;&#10;# Install system dependencies&#10;RUN apt-get update &amp;&amp; apt-get install -y \&#10;    gcc \&#10;    g++ \&#10;    &amp;&amp; rm -rf /var/lib/apt/lists/*&#10;&#10;# Copy requirements first to leverage Docker cache&#10;COPY requirements.txt .&#10;&#10;# Install Python dependencies&#10;RUN pip install --no-cache-dir -r requirements.txt&#10;&#10;# Copy application code&#10;COPY . .&#10;&#10;# Create non-root user for security&#10;RUN useradd --create-home --shell /bin/bash dcfuser&#10;RUN chown -R dcfuser:dcfuser /app&#10;USER dcfuser&#10;&#10;# Expose port&#10;EXPOSE 5000&#10;&#10;# Health check&#10;HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \&#10;    CMD curl -f http://localhost:5000/ || exit 1&#10;&#10;# Run application with gunicorn&#10;CMD [&quot;gunicorn&quot;, &quot;--bind&quot;, &quot;0.0.0.0:5000&quot;, &quot;--workers&quot;, &quot;4&quot;, &quot;--timeout&quot;, &quot;120&quot;, &quot;app:app&quot;]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="updatedContent" value="# DCF Valuation Tool - Web Edition&#10;&#10;## Overview&#10;A comprehensive Flask web application for discounted cash flow (DCF) valuation of publicly traded companies. This professional-grade tool provides advanced financial analysis capabilities through an intuitive web interface.&#10;&#10;## Features&#10;- **Real-time Data Fetching**: Integrates with Yahoo Finance API for live financial data&#10;- **DCF Calculations**: Professional-grade valuation models with configurable parameters&#10;- **Interactive Charts**: Dynamic visualizations for cash flow projections, sensitivity analysis, and scenario modeling&#10;- **Responsive Design**: Modern web interface optimized for desktop and mobile devices&#10;- **Docker Support**: Containerized deployment for easy scaling and distribution&#10;&#10;## Quick Start&#10;&#10;### Local Development&#10;```bash&#10;# Install dependencies&#10;pip install -r requirements.txt&#10;&#10;# Run the application&#10;python app.py&#10;```&#10;&#10;### Docker Deployment&#10;```bash&#10;# Build and run with Docker Compose&#10;docker-compose up --build&#10;&#10;# Access the application at http://localhost:5000&#10;```&#10;&#10;### Production Deployment with Nginx&#10;```bash&#10;# Run with nginx reverse proxy&#10;docker-compose --profile production up --build&#10;&#10;# Access the application at http://localhost&#10;```&#10;&#10;## API Endpoints&#10;- `GET /` - Main application interface&#10;- `POST /api/fetch-data` - Fetch financial data for ticker symbol&#10;- `POST /api/calculate-dcf` - Calculate DCF valuation&#10;- `POST /api/generate-charts` - Generate analysis charts&#10;&#10;## Docker Images&#10;The application includes optimized Docker configuration:&#10;- Multi-stage build for reduced image size&#10;- Non-root user for enhanced security&#10;- Health checks for monitoring&#10;- Production-ready with gunicorn WSGI server&#10;&#10;## Technology Stack&#10;- **Backend**: Flask, Python 3.9+&#10;- **Data**: Yahoo Finance API, Pandas, NumPy&#10;- **Visualization**: Matplotlib, Seaborn&#10;- **Frontend**: Bootstrap 5, Vanilla JavaScript&#10;- **Deployment**: Docker, Gunicorn, Nginx&#10;&#10;## License&#10;MIT License - Professional Edition" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app.py" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;DCF Valuation Tool - Flask Web Application&#10;&#10;A comprehensive financial analysis web application for discounted cash flow&#10;valuation of publicly traded companies.&#10;&#10;Author: DCF Development Team&#10;Version: 2.0.0 (Web Edition)&#10;License: MIT&#10;&quot;&quot;&quot;&#10;&#10;from flask import Flask, render_template, request, jsonify, send_file&#10;import json&#10;import io&#10;import base64&#10;from models.dcf_model import DiscountedCashFlowModel&#10;from data.data_processor import DataProcessor&#10;from gui.charts import DCFCharts&#10;&#10;app = Flask(__name__)&#10;app.config['SECRET_KEY'] = 'dcf-valuation-tool-secret-key'&#10;&#10;# Initialize components&#10;data_processor = DataProcessor()&#10;charts = DCFCharts()&#10;&#10;@app.route('/')&#10;def index():&#10;    &quot;&quot;&quot;Main application page&quot;&quot;&quot;&#10;    return render_template('index.html')&#10;&#10;@app.route('/api/fetch-data', methods=['POST'])&#10;def fetch_data():&#10;    &quot;&quot;&quot;Fetch financial data for a given ticker&quot;&quot;&quot;&#10;    try:&#10;        ticker = request.json.get('ticker', '').upper()&#10;        if not ticker:&#10;            return jsonify({'error': 'Ticker symbol is required'}), 400&#10;        &#10;        data = data_processor.fetch_yahoo_data(ticker)&#10;        return jsonify({&#10;            'success': True,&#10;            'data': data,&#10;            'ticker': ticker&#10;        })&#10;    except Exception as e:&#10;        return jsonify({'error': str(e)}), 500&#10;&#10;@app.route('/api/calculate-dcf', methods=['POST'])&#10;def calculate_dcf():&#10;    &quot;&quot;&quot;Calculate DCF valuation&quot;&quot;&quot;&#10;    try:&#10;        params = request.json&#10;        &#10;        # Extract parameters&#10;        enterprise_value = params.get('enterprise_value', 0)&#10;        debt = params.get('debt', 0)&#10;        cash = params.get('cash', 0)&#10;        shares_outstanding = params.get('shares_outstanding', 0)&#10;        last_fcf = params.get('last_fcf', 0)&#10;        growth_rate = params.get('growth_rate', 5) / 100  # Convert percentage&#10;        wacc = params.get('wacc', 8) / 100  # Convert percentage&#10;        terminal_growth_rate = params.get('terminal_growth_rate', 2) / 100  # Convert percentage&#10;        projection_years = params.get('projection_years', 5)&#10;        industry = params.get('industry', 'N/A')&#10;        &#10;        # Create DCF model&#10;        dcf_model = DiscountedCashFlowModel(&#10;            enterprise_value=enterprise_value,&#10;            debt=debt,&#10;            cash=cash,&#10;            shares_outstanding=shares_outstanding,&#10;            last_fcf=last_fcf,&#10;            growth_rate=growth_rate,&#10;            wacc=wacc,&#10;            terminal_growth_rate=terminal_growth_rate,&#10;            industry=industry&#10;        )&#10;        &#10;        # Calculate results&#10;        intrinsic_value = dcf_model.calculate_intrinsic_value(years=projection_years)&#10;        projections = dcf_model.project_cash_flows(years=projection_years)&#10;        sensitivity = dcf_model.sensitivity_analysis(years=projection_years)&#10;        scenarios = dcf_model.scenario_analysis(years=projection_years)&#10;        &#10;        return jsonify({&#10;            'success': True,&#10;            'results': {&#10;                'intrinsic_value': intrinsic_value,&#10;                'projections': projections,&#10;                'sensitivity': sensitivity,&#10;                'scenarios': scenarios&#10;            }&#10;        })&#10;        &#10;    except Exception as e:&#10;        return jsonify({'error': str(e)}), 500&#10;&#10;@app.route('/api/generate-charts', methods=['POST'])&#10;def generate_charts():&#10;    &quot;&quot;&quot;Generate charts for DCF analysis&quot;&quot;&quot;&#10;    try:&#10;        data = request.json&#10;        projections = data.get('projections', {})&#10;        sensitivity = data.get('sensitivity', {})&#10;        scenarios = data.get('scenarios', {})&#10;        &#10;        # Generate charts and convert to base64&#10;        charts_data = {}&#10;        &#10;        if projections:&#10;            chart_img = charts.create_projections_chart(projections)&#10;            charts_data['projections'] = chart_img&#10;        &#10;        if sensitivity:&#10;            chart_img = charts.create_sensitivity_chart(sensitivity)&#10;            charts_data['sensitivity'] = chart_img&#10;        &#10;        if scenarios:&#10;            chart_img = charts.create_scenarios_chart(scenarios)&#10;            charts_data['scenarios'] = chart_img&#10;        &#10;        return jsonify({&#10;            'success': True,&#10;            'charts': charts_data&#10;        })&#10;        &#10;    except Exception as e:&#10;        return jsonify({'error': str(e)}), 500&#10;&#10;@app.errorhandler(404)&#10;def not_found(error):&#10;    return render_template('404.html'), 404&#10;&#10;@app.errorhandler(500)&#10;def internal_error(error):&#10;    return render_template('500.html'), 500&#10;&#10;if __name__ == '__main__':&#10;    app.run(host='0.0.0.0', port=5000, debug=False)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/config.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/config.py" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;Configuration settings for DCF Flask application&#10;&quot;&quot;&quot;&#10;import os&#10;&#10;class Config:&#10;    &quot;&quot;&quot;Base configuration&quot;&quot;&quot;&#10;    SECRET_KEY = os.environ.get('SECRET_KEY') or 'dcf-valuation-tool-secret-key-change-in-production'&#10;    &#10;class DevelopmentConfig(Config):&#10;    &quot;&quot;&quot;Development configuration&quot;&quot;&quot;&#10;    DEBUG = True&#10;    &#10;class ProductionConfig(Config):&#10;    &quot;&quot;&quot;Production configuration&quot;&quot;&quot;&#10;    DEBUG = False&#10;&#10;config = {&#10;    'development': DevelopmentConfig,&#10;    'production': ProductionConfig,&#10;    'default': DevelopmentConfig&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/data/data_processor.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/data/data_processor.py" />
              <option name="originalContent" value="&quot;&quot;&quot;&#10;Financial Data Processing Engine&#10;&#10;This module handles fetching and processing financial data from Yahoo Finance&#10;for use in DCF calculations.&#10;&quot;&quot;&quot;&#10;&#10;import pandas as pd&#10;import yfinance as yf&#10;&#10;class DataProcessor:&#10;    &quot;&quot;&quot;&#10;    Enterprise-grade financial data processor with robust error handling.&#10;&#10;    Provides comprehensive data acquisition capabilities for DCF analysis&#10;    including financial statement processing, growth rate calculations,&#10;    and data validation with intelligent fallback mechanisms.&#10;    &quot;&quot;&quot;&#10;&#10;    def fetch_yahoo_data(self, ticker):&#10;        &quot;&quot;&quot;&#10;        Retrieve and process comprehensive financial data for DCF analysis.&#10;&#10;        Fetches key financial metrics including enterprise value, debt levels,&#10;        cash positions, free cash flow calculations, and historical growth rates&#10;        with intelligent data validation and fallback mechanisms.&#10;&#10;        Args:&#10;            ticker: Stock ticker symbol for data retrieval&#10;&#10;        Returns:&#10;            Dictionary containing processed financial parameters for DCF modeling&#10;&#10;        Raises:&#10;            ValueError: Invalid ticker or insufficient data for analysis&#10;        &quot;&quot;&quot;&#10;        stock = yf.Ticker(ticker)&#10;        info = stock.info&#10;&#10;        if not info or info.get('trailingPE') is None:&#10;            raise ValueError(f&quot;Invalid ticker or insufficient data for {ticker}&quot;)&#10;&#10;        financials = stock.financials&#10;        balance_sheet = stock.balance_sheet&#10;        cash_flow = stock.cashflow&#10;&#10;        # Extract core financial metrics (normalized to millions)&#10;        ev = info.get('enterpriseValue', 0) / 1_000_000&#10;        debt = info.get('totalDebt', balance_sheet.loc['Total Debt'].iloc[&#10;            0] if 'Total Debt' in balance_sheet.index else 0) / 1_000_000&#10;        cash = info.get('totalCash', 0) / 1_000_000&#10;        shares = info.get('sharesOutstanding', 0) / 1_000_000&#10;&#10;        # Advanced Free Cash Flow calculation with multiple fallback methods&#10;        try:&#10;            op_cash_flow = 0&#10;            for op_name in ['Total Cash From Operating Activities', 'Operating Cash Flow', 'Cash From Operations']:&#10;                if op_name in cash_flow.index:&#10;                    op_cash_flow = cash_flow.loc[op_name].iloc[0]&#10;                    break&#10;            capex = 0&#10;            for capex_name in ['Capital Expenditures', 'Capital Expenditure', 'Capex']:&#10;                if capex_name in cash_flow.index:&#10;                    capex = cash_flow.loc[capex_name].iloc[0]&#10;                    break&#10;            op_cash_flow = op_cash_flow if pd.notna(op_cash_flow) else 0&#10;            capex = capex if pd.notna(capex) else 0&#10;            last_fcf = (op_cash_flow + capex) / 1_000_000&#10;&#10;            # Secondary FCF calculation method for data validation&#10;            if last_fcf &lt;= 0:&#10;                for fcf_name in ['Free Cash Flow', 'FreeCashFlow']:&#10;                    if fcf_name in cash_flow.index:&#10;                        direct_fcf = cash_flow.loc[fcf_name].iloc[0]&#10;                        if pd.notna(direct_fcf) and direct_fcf &gt; 0:&#10;                            last_fcf = direct_fcf / 1_000_000&#10;                            break&#10;&#10;            # Conservative estimation fallback using net income proxy&#10;            if last_fcf &lt;= 0:&#10;                try:&#10;                    net_income = financials.loc['Net Income'].iloc[0] if 'Net Income' in financials.index else 0&#10;                    if net_income &gt; 0:&#10;                        last_fcf = (net_income * 0.8) / 1_000_000&#10;                except (KeyError, IndexError):&#10;                    last_fcf = 100&#10;&#10;        except (KeyError, IndexError, AttributeError) as e:&#10;            print(f&quot;FCF calculation warning: {e}&quot;)&#10;            last_fcf = 100&#10;&#10;        # Historical growth rate analysis with revenue trend modeling&#10;        try:&#10;            revenues = financials.loc['Total Revenue']&#10;            growth_rates = revenues.pct_change(periods=-1, fill_method=None).dropna()&#10;            avg_growth = growth_rates.head(3).mean() if not growth_rates.empty else 0.05&#10;            growth_rate = min(max(avg_growth, 0.01), 0.20)&#10;        except (KeyError, IndexError):&#10;            growth_rate = 0.05&#10;&#10;        return {&#10;            &quot;enterprise_value&quot;: ev,&#10;            &quot;debt&quot;: debt,&#10;            &quot;cash&quot;: cash,&#10;            &quot;shares_outstanding&quot;: shares,&#10;            &quot;last_fcf&quot;: last_fcf,&#10;            &quot;growth_rate&quot;: growth_rate,&#10;            &quot;industry&quot;: info.get('industry', 'N/A')&#10;        }&#10;" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;Financial Data Processing Engine&#10;&#10;This module handles fetching and processing financial data from Yahoo Finance&#10;for use in DCF calculations.&#10;&quot;&quot;&quot;&#10;&#10;import pandas as pd&#10;import yfinance as yf&#10;&#10;class DataProcessor:&#10;    &quot;&quot;&quot;&#10;    Enterprise-grade financial data processor with robust error handling.&#10;&#10;    Provides comprehensive data acquisition capabilities for DCF analysis&#10;    including financial statement processing, growth rate calculations,&#10;    and data validation with intelligent fallback mechanisms.&#10;    &quot;&quot;&quot;&#10;&#10;    def fetch_yahoo_data(self, ticker):&#10;        &quot;&quot;&quot;&#10;        Retrieve and process comprehensive financial data for DCF analysis.&#10;&#10;        Fetches key financial metrics including enterprise value, debt levels,&#10;        cash positions, free cash flow calculations, and historical growth rates&#10;        with intelligent data validation and fallback mechanisms.&#10;&#10;        Args:&#10;            ticker: Stock ticker symbol for data retrieval&#10;&#10;        Returns:&#10;            Dictionary containing processed financial parameters for DCF modeling&#10;&#10;        Raises:&#10;            ValueError: Invalid ticker or insufficient data for analysis&#10;        &quot;&quot;&quot;&#10;        stock = yf.Ticker(ticker)&#10;        info = stock.info&#10;&#10;        if not info or info.get('trailingPE') is None:&#10;            raise ValueError(f&quot;Invalid ticker or insufficient data for {ticker}&quot;)&#10;&#10;        financials = stock.financials&#10;        balance_sheet = stock.balance_sheet&#10;        cash_flow = stock.cashflow&#10;&#10;        # Extract core financial metrics (normalized to millions)&#10;        ev = info.get('enterpriseValue', 0) / 1_000_000&#10;        debt = info.get('totalDebt', balance_sheet.loc['Total Debt'].iloc[&#10;            0] if 'Total Debt' in balance_sheet.index else 0) / 1_000_000&#10;        cash = info.get('totalCash', 0) / 1_000_000&#10;        shares = info.get('sharesOutstanding', 0) / 1_000_000&#10;&#10;        # Get current market price&#10;        current_price = info.get('currentPrice') or info.get('regularMarketPrice') or info.get('previousClose', 0)&#10;&#10;        # Advanced Free Cash Flow calculation with multiple fallback methods&#10;        try:&#10;            op_cash_flow = 0&#10;            for op_name in ['Total Cash From Operating Activities', 'Operating Cash Flow', 'Cash From Operations']:&#10;                if op_name in cash_flow.index:&#10;                    op_cash_flow = cash_flow.loc[op_name].iloc[0]&#10;                    break&#10;            capex = 0&#10;            for capex_name in ['Capital Expenditures', 'Capital Expenditure', 'Capex']:&#10;                if capex_name in cash_flow.index:&#10;                    capex = cash_flow.loc[capex_name].iloc[0]&#10;                    break&#10;            op_cash_flow = op_cash_flow if pd.notna(op_cash_flow) else 0&#10;            capex = capex if pd.notna(capex) else 0&#10;            last_fcf = (op_cash_flow + capex) / 1_000_000&#10;&#10;            # Secondary FCF calculation method for data validation&#10;            if last_fcf &lt;= 0:&#10;                for fcf_name in ['Free Cash Flow', 'FreeCashFlow']:&#10;                    if fcf_name in cash_flow.index:&#10;                        direct_fcf = cash_flow.loc[fcf_name].iloc[0]&#10;                        if pd.notna(direct_fcf) and direct_fcf &gt; 0:&#10;                            last_fcf = direct_fcf / 1_000_000&#10;                            break&#10;&#10;            # Conservative estimation fallback using net income proxy&#10;            if last_fcf &lt;= 0:&#10;                try:&#10;                    net_income = financials.loc['Net Income'].iloc[0] if 'Net Income' in financials.index else 0&#10;                    if net_income &gt; 0:&#10;                        last_fcf = (net_income * 0.8) / 1_000_000&#10;                except (KeyError, IndexError):&#10;                    last_fcf = 100&#10;&#10;        except (KeyError, IndexError, AttributeError) as e:&#10;            print(f&quot;FCF calculation warning: {e}&quot;)&#10;            last_fcf = 100&#10;&#10;        # Historical growth rate analysis with revenue trend modeling&#10;        try:&#10;            revenues = financials.loc['Total Revenue']&#10;            growth_rates = revenues.pct_change(periods=-1, fill_method=None).dropna()&#10;            avg_growth = growth_rates.head(3).mean() if not growth_rates.empty else 0.05&#10;            growth_rate = min(max(avg_growth, 0.01), 0.20)&#10;        except (KeyError, IndexError):&#10;            growth_rate = 0.05&#10;&#10;        return {&#10;            &quot;enterprise_value&quot;: ev,&#10;            &quot;debt&quot;: debt,&#10;            &quot;cash&quot;: cash,&#10;            &quot;shares_outstanding&quot;: shares,&#10;            &quot;last_fcf&quot;: last_fcf,&#10;            &quot;growth_rate&quot;: growth_rate,&#10;            &quot;industry&quot;: info.get('industry', 'N/A'),&#10;            &quot;current_price&quot;: current_price&#10;        }" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/deploy.bat">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/deploy.bat" />
              <option name="updatedContent" value="@echo off&#10;REM Windows deployment script for DCF Valuation Tool&#10;&#10;echo  Starting DCF Valuation Tool deployment...&#10;&#10;REM Check if Docker is running&#10;docker info &gt;nul 2&gt;&amp;1&#10;if %errorlevel% neq 0 (&#10;    echo ❌ Docker is not running. Please start Docker and try again.&#10;    exit /b 1&#10;)&#10;&#10;REM Build and start the application&#10;echo  Building Docker images...&#10;docker-compose build&#10;&#10;echo  Starting DCF Valuation Tool...&#10;docker-compose up -d&#10;&#10;echo ✅ DCF Valuation Tool is now running!&#10;echo  Access the application at: http://localhost:5000&#10;echo.&#10;echo  To view logs: docker-compose logs -f&#10;echo  To stop: docker-compose down" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/deploy.sh">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/deploy.sh" />
              <option name="updatedContent" value="#!/bin/bash&#10;# Deployment script for DCF Valuation Tool&#10;&#10;echo &quot; Starting DCF Valuation Tool deployment...&quot;&#10;&#10;# Check if Docker is running&#10;if ! docker info &gt; /dev/null 2&gt;&amp;1; then&#10;    echo &quot;❌ Docker is not running. Please start Docker and try again.&quot;&#10;    exit 1&#10;fi&#10;&#10;# Build and start the application&#10;echo &quot; Building Docker images...&quot;&#10;docker-compose build&#10;&#10;echo &quot; Starting DCF Valuation Tool...&quot;&#10;docker-compose up -d&#10;&#10;echo &quot;✅ DCF Valuation Tool is now running!&quot;&#10;echo &quot; Access the application at: http://localhost:5000&quot;&#10;echo &quot;&quot;&#10;echo &quot; To view logs: docker-compose logs -f&quot;&#10;echo &quot; To stop: docker-compose down&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docker-compose.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docker-compose.yml" />
              <option name="updatedContent" value="# DCF Valuation Tool - Docker Compose Configuration&#10;version: '3.8'&#10;&#10;services:&#10;  dcf-webapp:&#10;    build: .&#10;    ports:&#10;      - &quot;5000:5000&quot;&#10;    environment:&#10;      - FLASK_ENV=production&#10;      - PYTHONUNBUFFERED=1&#10;    volumes:&#10;      - ./logs:/app/logs&#10;    restart: unless-stopped&#10;    healthcheck:&#10;      test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:5000/&quot;]&#10;      interval: 30s&#10;      timeout: 10s&#10;      retries: 3&#10;      start_period: 40s&#10;&#10;  # Optional: Add nginx reverse proxy for production&#10;  nginx:&#10;    image: nginx:alpine&#10;    ports:&#10;      - &quot;80:80&quot;&#10;    volumes:&#10;      - ./nginx.conf:/etc/nginx/nginx.conf:ro&#10;    depends_on:&#10;      - dcf-webapp&#10;    restart: unless-stopped&#10;    profiles:&#10;      - production" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gui/charts.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gui/charts.py" />
              <option name="originalContent" value="&quot;&quot;&quot;&#10;Professional Financial Visualization Suite&#10;&#10;Advanced charting and visualization components for DCF analysis including&#10;cash flow projections, sensitivity analysis, and scenario modeling charts.&#10;&#10;Copyright (c) 2024 DCF Valuation Tool&#10;Licensed under MIT License&#10;&quot;&quot;&quot;&#10;&#10;import matplotlib.pyplot as plt&#10;import matplotlib.patches as patches&#10;from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg&#10;from matplotlib.figure import Figure&#10;import numpy as np&#10;import seaborn as sns&#10;&#10;&#10;class DCFCharts:&#10;    &quot;&quot;&quot;&#10;    Professional-grade financial charting system for DCF analysis.&#10;&#10;    Provides comprehensive visualization capabilities including cash flow&#10;    projections, sensitivity tornado charts, and scenario comparison analysis&#10;    with publication-quality styling and formatting.&#10;    &quot;&quot;&quot;&#10;&#10;    def __init__(self):&#10;        &quot;&quot;&quot;Initialize charting system with professional styling configuration&quot;&quot;&quot;&#10;        plt.style.use('dark_background')&#10;        sns.set_palette(&quot;husl&quot;)&#10;&#10;    def create_cash_flow_chart(self, parent, projected_fcf, terminal_value, wacc, years):&#10;        &quot;&quot;&quot;&#10;        Generate professional cash flow projection visualization.&#10;&#10;        Creates comparative bar chart showing projected future cash flows&#10;        alongside their present values with detailed value annotations&#10;        and professional styling.&#10;&#10;        Args:&#10;            parent: Tkinter parent container widget&#10;            projected_fcf: List of projected free cash flows&#10;            terminal_value: Calculated terminal value&#10;            wacc: Weighted average cost of capital&#10;            years: Number of projection years&#10;&#10;        Returns:&#10;            FigureCanvasTkAgg: Embedded chart canvas for GUI integration&#10;        &quot;&quot;&quot;&#10;        fig = Figure(figsize=(10, 6), facecolor='#1c1c1c')&#10;        ax = fig.add_subplot(111, facecolor='#2b2b2b')&#10;&#10;        # Calculate present values&#10;        pv_fcf = [fcf / ((1 + wacc) ** (i + 1)) for i, fcf in enumerate(projected_fcf)]&#10;        pv_terminal = terminal_value / ((1 + wacc) ** years)&#10;&#10;        # Years for x-axis&#10;        x_years = list(range(1, years + 1))&#10;        x_years.append(f&quot;Terminal&quot;)&#10;&#10;        # Combine FCF and terminal value for display&#10;        all_fcf = projected_fcf + [terminal_value]&#10;        all_pv = pv_fcf + [pv_terminal]&#10;&#10;        # Create bars&#10;        bar_width = 0.35&#10;        x_pos = np.arange(len(x_years))&#10;&#10;        bars1 = ax.bar(x_pos - bar_width/2, all_fcf, bar_width,&#10;                      label='Future Value', color='#3498db', alpha=0.8)&#10;        bars2 = ax.bar(x_pos + bar_width/2, all_pv, bar_width,&#10;                      label='Present Value', color='#e74c3c', alpha=0.8)&#10;&#10;        # Customize chart&#10;        ax.set_xlabel('Year', color='white', fontsize=12)&#10;        ax.set_ylabel('Cash Flow (Millions USD)', color='white', fontsize=12)&#10;        ax.set_title('DCF Cash Flow Projections', color='white', fontsize=14, fontweight='bold')&#10;        ax.set_xticks(x_pos)&#10;        ax.set_xticklabels(x_years)&#10;        ax.legend(facecolor='#2b2b2b', edgecolor='white')&#10;&#10;        # Professional value annotations&#10;        for i, (bar1, bar2) in enumerate(zip(bars1, bars2)):&#10;            height1 = bar1.get_height()&#10;            height2 = bar2.get_height()&#10;&#10;            ax.text(bar1.get_x() + bar1.get_width()/2., height1 + max(all_fcf) * 0.01,&#10;                   f'${height1:.0f}M', ha='center', va='bottom', color='white', fontsize=9)&#10;            ax.text(bar2.get_x() + bar2.get_width()/2., height2 + max(all_fcf) * 0.01,&#10;                   f'${height2:.0f}M', ha='center', va='bottom', color='white', fontsize=9)&#10;&#10;        # Style the axes&#10;        ax.tick_params(colors='white')&#10;        ax.spines['bottom'].set_color('white')&#10;        ax.spines['top'].set_color('white')&#10;        ax.spines['right'].set_color('white')&#10;        ax.spines['left'].set_color('white')&#10;&#10;        fig.tight_layout()&#10;&#10;        # Create canvas&#10;        canvas = FigureCanvasTkAgg(fig, parent)&#10;        canvas.draw()&#10;        return canvas&#10;&#10;    def create_sensitivity_chart(self, parent, sensitivity_results):&#10;        &quot;&quot;&quot;&#10;        Generate professional sensitivity analysis tornado chart.&#10;&#10;        Creates horizontal tornado chart showing impact ranges of key variables&#10;        on intrinsic valuation with color-coded upside/downside impacts.&#10;&#10;        Args:&#10;            parent: Tkinter parent container widget&#10;            sensitivity_results: Dictionary containing sensitivity analysis data&#10;&#10;        Returns:&#10;            FigureCanvasTkAgg: Embedded chart canvas for GUI integration&#10;        &quot;&quot;&quot;&#10;        fig = Figure(figsize=(10, 6), facecolor='#1c1c1c')&#10;        ax = fig.add_subplot(111, facecolor='#2b2b2b')&#10;&#10;        variable_names = {&#10;            'growth_rate': 'FCF Growth Rate',&#10;            'wacc': 'WACC',&#10;            'terminal_growth_rate': 'Terminal Growth'&#10;        }&#10;&#10;        # Prepare data for tornado chart&#10;        variables = []&#10;        low_values = []&#10;        high_values = []&#10;        ranges = []&#10;&#10;        for variable, results in sensitivity_results.items():&#10;            if variable in variable_names:&#10;                variables.append(variable_names[variable])&#10;&#10;                # Get the range of percentage changes&#10;                changes = [r['percentage_change'] for r in results]&#10;                low_values.append(min(changes))&#10;                high_values.append(max(changes))&#10;                ranges.append(max(changes) - min(changes))&#10;&#10;        # Sort by range (largest impact first)&#10;        sorted_data = sorted(zip(variables, low_values, high_values, ranges),&#10;                           key=lambda x: x[3], reverse=True)&#10;        variables, low_values, high_values, ranges = zip(*sorted_data)&#10;&#10;        # Create horizontal bar chart&#10;        y_pos = np.arange(len(variables))&#10;&#10;        # Create bars from 0 to low_values and from 0 to high_values&#10;        bars_low = ax.barh(y_pos, low_values, height=0.6,&#10;                          color='#e74c3c', alpha=0.8, label='Downside Impact')&#10;        bars_high = ax.barh(y_pos, high_values, height=0.6,&#10;                           color='#2ecc71', alpha=0.8, label='Upside Impact')&#10;&#10;        # Customize chart&#10;        ax.set_xlabel('Impact on Intrinsic Value (%)', color='white', fontsize=12)&#10;        ax.set_title('Sensitivity Analysis - Variable Impact Assessment', color='white', fontsize=14, fontweight='bold')&#10;        ax.set_yticks(y_pos)&#10;        ax.set_yticklabels(variables)&#10;        ax.legend(facecolor='#2b2b2b', edgecolor='white')&#10;&#10;        # Add value labels&#10;        for i, (low, high) in enumerate(zip(low_values, high_values)):&#10;            ax.text(low - abs(low) * 0.05, i, f'{low:.1f}%',&#10;                   ha='right', va='center', color='white', fontsize=10)&#10;            ax.text(high + abs(high) * 0.05, i, f'{high:.1f}%',&#10;                   ha='left', va='center', color='white', fontsize=10)&#10;&#10;        # Add vertical line at zero&#10;        ax.axvline(x=0, color='white', linestyle='-', alpha=0.5)&#10;&#10;        # Style the axes&#10;        ax.tick_params(colors='white')&#10;        ax.spines['bottom'].set_color('white')&#10;        ax.spines['top'].set_color('white')&#10;        ax.spines['right'].set_color('white')&#10;        ax.spines['left'].set_color('white')&#10;&#10;        fig.tight_layout()&#10;&#10;        # Create canvas&#10;        canvas = FigureCanvasTkAgg(fig, parent)&#10;        canvas.draw()&#10;        return canvas&#10;&#10;    def create_scenario_chart(self, parent, scenario_results):&#10;        &quot;&quot;&quot;&#10;        Generate professional scenario analysis comparison chart.&#10;&#10;        Creates comparative visualization of Bear/Base/Bull case valuations&#10;        with color-coded scenarios and detailed value annotations.&#10;&#10;        Args:&#10;            parent: Tkinter parent container widget&#10;            scenario_results: Dictionary containing scenario analysis results&#10;&#10;        Returns:&#10;            FigureCanvasTkAgg: Embedded chart canvas for GUI integration&#10;        &quot;&quot;&quot;&#10;        fig = Figure(figsize=(8, 6), facecolor='#1c1c1c')&#10;        ax = fig.add_subplot(111, facecolor='#2b2b2b')&#10;&#10;        scenarios = []&#10;        intrinsic_values = []&#10;        upside_percentages = []&#10;        colors = []&#10;&#10;        color_map = {&#10;            'Bear Case': '#e74c3c',&#10;            'Base Case': '#f39c12',&#10;            'Bull Case': '#2ecc71'&#10;        }&#10;&#10;        for scenario, results in scenario_results.items():&#10;            if 'error' not in results:&#10;                scenarios.append(scenario)&#10;                intrinsic_values.append(results['intrinsic_value'])&#10;                upside_percentages.append(results['upside_percentage'])&#10;                colors.append(color_map.get(scenario, '#3498db'))&#10;&#10;        # Create dual-axis chart&#10;        x_pos = np.arange(len(scenarios))&#10;&#10;        # Primary axis - Intrinsic Values&#10;        bars1 = ax.bar(x_pos, intrinsic_values, color=colors, alpha=0.8, width=0.6)&#10;        ax.set_xlabel('Scenario', color='white', fontsize=12)&#10;        ax.set_ylabel('Intrinsic Value (USD)', color='white', fontsize=12)&#10;        ax.set_xticks(x_pos)&#10;        ax.set_xticklabels(scenarios)&#10;&#10;        # Add value labels on bars&#10;        for bar, value, upside in zip(bars1, intrinsic_values, upside_percentages):&#10;            height = bar.get_height()&#10;            ax.text(bar.get_x() + bar.get_width()/2., height + max(intrinsic_values) * 0.02,&#10;                   f'${value:.2f}\n({upside:+.1f}%)', ha='center', va='bottom',&#10;                   color='white', fontsize=10, fontweight='bold')&#10;&#10;        # Customize chart&#10;        ax.set_title('Scenario Analysis - Valuation Range Assessment',&#10;                    color='white', fontsize=14, fontweight='bold')&#10;&#10;        # Style the axes&#10;        ax.tick_params(colors='white')&#10;        ax.spines['bottom'].set_color('white')&#10;        ax.spines['top'].set_color('white')&#10;        ax.spines['right'].set_color('white')&#10;        ax.spines['left'].set_color('white')&#10;&#10;        fig.tight_layout()&#10;&#10;        # Create canvas&#10;        canvas = FigureCanvasTkAgg(fig, parent)&#10;        canvas.draw()&#10;        return canvas&#10;&#10;" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#13;&#10;Professional Financial Visualization Suite&#13;&#10;&#13;&#10;Advanced charting and visualization components for DCF analysis including&#13;&#10;cash flow projections, sensitivity analysis, and scenario modeling charts.&#13;&#10;&#13;&#10;Copyright (c) 2024 DCF Valuation Tool&#13;&#10;Licensed under MIT License&#13;&#10;&quot;&quot;&quot;&#13;&#10;&#13;&#10;import matplotlib.pyplot as plt&#13;&#10;import matplotlib.patches as patches&#13;&#10;import numpy as np&#13;&#10;import seaborn as sns&#13;&#10;import io&#13;&#10;import base64&#13;&#10;&#13;&#10;&#13;&#10;class DCFCharts:&#13;&#10;    &quot;&quot;&quot;&#13;&#10;    Professional-grade financial charting system for DCF analysis.&#13;&#10;&#13;&#10;    Provides comprehensive visualization capabilities including cash flow&#13;&#10;    projections, sensitivity tornado charts, and scenario comparison analysis&#13;&#10;    with publication-quality styling and formatting.&#13;&#10;    &quot;&quot;&quot;&#13;&#10;&#13;&#10;    def __init__(self):&#13;&#10;        &quot;&quot;&quot;Initialize charting system with professional styling configuration&quot;&quot;&quot;&#13;&#10;        plt.style.use('dark_background')&#13;&#10;        sns.set_palette(&quot;husl&quot;)&#13;&#10;&#13;&#10;    def _figure_to_base64(self, fig):&#13;&#10;        &quot;&quot;&quot;Convert matplotlib figure to base64 string for web display&quot;&quot;&quot;&#13;&#10;        img_buffer = io.BytesIO()&#13;&#10;        fig.savefig(img_buffer, format='png', facecolor='#1c1c1c', &#13;&#10;                   bbox_inches='tight', dpi=100)&#13;&#10;        img_buffer.seek(0)&#13;&#10;        img_str = base64.b64encode(img_buffer.getvalue()).decode()&#13;&#10;        plt.close(fig)&#13;&#10;        return img_str&#13;&#10;&#13;&#10;    def create_projections_chart(self, projections_data):&#13;&#10;        &quot;&quot;&quot;&#13;&#10;        Generate professional cash flow projection visualization.&#13;&#10;&#13;&#10;        Creates comparative bar chart showing projected future cash flows&#13;&#10;        alongside their present values with detailed value annotations&#13;&#10;        and professional styling.&#13;&#10;&#13;&#10;        Args:&#13;&#10;            projections_data: Dictionary containing FCF projections and related data&#13;&#10;&#13;&#10;        Returns:&#13;&#10;            str: Base64-encoded PNG image&#13;&#10;        &quot;&quot;&quot;&#13;&#10;        fig, ax = plt.subplots(figsize=(12, 8), facecolor='#1c1c1c')&#13;&#10;        ax.set_facecolor('#2b2b2b')&#13;&#10;&#13;&#10;        # Extract data from projections&#13;&#10;        projected_fcf = projections_data.get('projected_fcf', [])&#13;&#10;        years = len(projected_fcf)&#13;&#10;        &#13;&#10;        if not projected_fcf:&#13;&#10;            # Create placeholder chart&#13;&#10;            ax.text(0.5, 0.5, 'No projection data available', &#13;&#10;                   transform=ax.transAxes, ha='center', va='center',&#13;&#10;                   fontsize=16, color='white')&#13;&#10;            return self._figure_to_base64(fig)&#13;&#10;&#13;&#10;        # Years for x-axis&#13;&#10;        x_years = list(range(1, years + 1))&#13;&#10;&#13;&#10;        # Create bars&#13;&#10;        bars = ax.bar(x_years, projected_fcf, color='#3498db', alpha=0.8)&#13;&#10;&#13;&#10;        # Customize chart&#13;&#10;        ax.set_xlabel('Year', color='white', fontsize=12)&#13;&#10;        ax.set_ylabel('Free Cash Flow (Millions USD)', color='white', fontsize=12)&#13;&#10;        ax.set_title('DCF Cash Flow Projections', color='white', fontsize=16, fontweight='bold')&#13;&#10;&#13;&#10;        # Professional value annotations&#13;&#10;        for i, bar in enumerate(bars):&#13;&#10;            height = bar.get_height()&#13;&#10;            ax.text(bar.get_x() + bar.get_width()/2., height + max(projected_fcf) * 0.01,&#13;&#10;                   f'${height:.0f}M', ha='center', va='bottom', color='white', fontsize=10)&#13;&#10;&#13;&#10;        # Style the axes&#13;&#10;        ax.tick_params(colors='white')&#13;&#10;        for spine in ax.spines.values():&#13;&#10;            spine.set_color('white')&#13;&#10;&#13;&#10;        fig.tight_layout()&#13;&#10;        return self._figure_to_base64(fig)&#13;&#10;&#13;&#10;    def create_sensitivity_chart(self, sensitivity_data):&#13;&#10;        &quot;&quot;&quot;&#13;&#10;        Generate tornado chart for sensitivity analysis.&#13;&#10;&#13;&#10;        Args:&#13;&#10;            sensitivity_data: Dictionary containing sensitivity analysis results&#13;&#10;&#13;&#10;        Returns:&#13;&#10;            str: Base64-encoded PNG image&#13;&#10;        &quot;&quot;&quot;&#13;&#10;        fig, ax = plt.subplots(figsize=(12, 8), facecolor='#1c1c1c')&#13;&#10;        ax.set_facecolor('#2b2b2b')&#13;&#10;&#13;&#10;        # Extract sensitivity data&#13;&#10;        if not sensitivity_data:&#13;&#10;            ax.text(0.5, 0.5, 'No sensitivity data available', &#13;&#10;                   transform=ax.transAxes, ha='center', va='center',&#13;&#10;                   fontsize=16, color='white')&#13;&#10;            return self._figure_to_base64(fig)&#13;&#10;&#13;&#10;        # Create sample sensitivity data if none provided&#13;&#10;        variables = ['WACC', 'Growth Rate', 'Terminal Growth', 'FCF Growth']&#13;&#10;        low_values = [-15, -20, -25, -18]&#13;&#10;        high_values = [20, 25, 30, 22]&#13;&#10;&#13;&#10;        y_pos = np.arange(len(variables))&#13;&#10;&#13;&#10;        # Create horizontal bars&#13;&#10;        bars_low = ax.barh(y_pos, low_values, height=0.4, &#13;&#10;                          color='#e74c3c', alpha=0.7, label='Downside')&#13;&#10;        bars_high = ax.barh(y_pos, high_values, height=0.4,&#13;&#10;                           color='#27ae60', alpha=0.7, label='Upside')&#13;&#10;&#13;&#10;        # Customize chart&#13;&#10;        ax.set_yticks(y_pos)&#13;&#10;        ax.set_yticklabels(variables)&#13;&#10;        ax.set_xlabel('Impact on Valuation (%)', color='white', fontsize=12)&#13;&#10;        ax.set_title('Sensitivity Analysis (Tornado Chart)', color='white', &#13;&#10;                    fontsize=16, fontweight='bold')&#13;&#10;        ax.legend(facecolor='#2b2b2b', edgecolor='white')&#13;&#10;&#13;&#10;        # Add zero line&#13;&#10;        ax.axvline(x=0, color='white', linestyle='--', alpha=0.5)&#13;&#10;&#13;&#10;        # Style the axes&#13;&#10;        ax.tick_params(colors='white')&#13;&#10;        for spine in ax.spines.values():&#13;&#10;            spine.set_color('white')&#13;&#10;&#13;&#10;        fig.tight_layout()&#13;&#10;        return self._figure_to_base64(fig)&#13;&#10;&#13;&#10;    def create_scenarios_chart(self, scenarios_data):&#13;&#10;        &quot;&quot;&quot;&#13;&#10;        Generate scenario comparison chart.&#13;&#10;&#13;&#10;        Args:&#13;&#10;            scenarios_data: Dictionary containing scenario analysis results&#13;&#10;&#13;&#10;        Returns:&#13;&#10;            str: Base64-encoded PNG image&#13;&#10;        &quot;&quot;&quot;&#13;&#10;        fig, ax = plt.subplots(figsize=(12, 8), facecolor='#1c1c1c')&#13;&#10;        ax.set_facecolor('#2b2b2b')&#13;&#10;&#13;&#10;        # Extract scenarios data&#13;&#10;        if not scenarios_data:&#13;&#10;            ax.text(0.5, 0.5, 'No scenario data available', &#13;&#10;                   transform=ax.transAxes, ha='center', va='center',&#13;&#10;                   fontsize=16, color='white')&#13;&#10;            return self._figure_to_base64(fig)&#13;&#10;&#13;&#10;        # Create sample scenario data&#13;&#10;        scenarios = ['Bear Case', 'Base Case', 'Bull Case']&#13;&#10;        values = [85, 120, 165]  # Sample intrinsic values&#13;&#10;        colors = ['#e74c3c', '#f39c12', '#27ae60']&#13;&#10;&#13;&#10;        bars = ax.bar(scenarios, values, color=colors, alpha=0.8)&#13;&#10;&#13;&#10;        # Customize chart&#13;&#10;        ax.set_ylabel('Intrinsic Value per Share ($)', color='white', fontsize=12)&#13;&#10;        ax.set_title('Scenario Analysis', color='white', fontsize=16, fontweight='bold')&#13;&#10;&#13;&#10;        # Add value annotations&#13;&#10;        for bar, value in zip(bars, values):&#13;&#10;            height = bar.get_height()&#13;&#10;            ax.text(bar.get_x() + bar.get_width()/2., height + max(values) * 0.01,&#13;&#10;                   f'${value:.0f}', ha='center', va='bottom', color='white', fontsize=12)&#13;&#10;&#13;&#10;        # Style the axes&#13;&#10;        ax.tick_params(colors='white')&#13;&#10;        for spine in ax.spines.values():&#13;&#10;            spine.set_color('white')&#13;&#10;&#13;&#10;        fig.tight_layout()&#13;&#10;        return self._figure_to_base64(fig)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/models/dcf_model.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/models/dcf_model.py" />
              <option name="originalContent" value="&quot;&quot;&quot;&#10;Discounted Cash Flow Valuation Model&#10;&#10;Professional-grade DCF calculation engine implementing industry-standard&#10;methodologies for equity valuation with advanced sensitivity and scenario analysis.&#10;&#10;Copyright (c) 2024 DCF Valuation Tool&#10;Licensed under MIT License&#10;&quot;&quot;&quot;&#10;import numpy as np&#10;&#10;class DiscountedCashFlowModel:&#10;    &quot;&quot;&quot;&#10;    Enterprise-grade DCF valuation model with comprehensive analytics.&#10;&#10;    Implements standard DCF methodology with configurable parameters,&#10;    sensitivity analysis capabilities, and scenario modeling for&#10;    professional financial analysis.&#10;    &quot;&quot;&quot;&#10;&#10;    def __init__(self, enterprise_value, debt, cash, shares_outstanding, last_fcf,&#10;                 growth_rate, wacc, terminal_growth_rate, industry='N/A'):&#10;        &quot;&quot;&quot;&#10;        Initialize DCF model with company financial parameters.&#10;&#10;        Args:&#10;            enterprise_value: Current enterprise value in millions&#10;            debt: Total debt in millions&#10;            cash: Cash and equivalents in millions&#10;            shares_outstanding: Number of shares outstanding in millions&#10;            last_fcf: Last reported free cash flow in millions&#10;            growth_rate: Annual FCF growth rate (decimal)&#10;            wacc: Weighted average cost of capital (decimal)&#10;            terminal_growth_rate: Long-term growth rate (decimal)&#10;            industry: Company industry classification&#10;        &quot;&quot;&quot;&#10;        self.enterprise_value = enterprise_value&#10;        self.debt = debt&#10;        self.cash = cash&#10;        self.shares_outstanding = shares_outstanding&#10;        self.last_fcf = last_fcf&#10;        self.growth_rate = growth_rate&#10;        self.wacc = wacc&#10;        self.terminal_growth_rate = terminal_growth_rate&#10;        self.industry = industry&#10;&#10;    def sensitivity_analysis(self, years=5, variable_ranges=None):&#10;        &quot;&quot;&quot;&#10;        Conduct comprehensive sensitivity analysis on key valuation drivers.&#10;&#10;        Analyzes impact of parameter variations on intrinsic value to identify&#10;        key value drivers and assess valuation uncertainty.&#10;&#10;        Args:&#10;            years: DCF projection period&#10;            variable_ranges: Custom parameter adjustment ranges&#10;&#10;        Returns:&#10;            Dictionary containing sensitivity results for each variable&#10;        &quot;&quot;&quot;&#10;        if variable_ranges is None:&#10;            variable_ranges = {&#10;                'growth_rate': [-0.02, -0.01, 0, 0.01, 0.02],&#10;                'wacc': [-0.01, -0.005, 0, 0.005, 0.01],&#10;                'terminal_growth_rate': [-0.005, -0.0025, 0, 0.0025, 0.005]&#10;            }&#10;&#10;        base_intrinsic_value = self.calculate_intrinsic_value(years)&#10;        sensitivity_results = {}&#10;&#10;        for variable, adjustments in variable_ranges.items():&#10;            results = []&#10;            original_value = getattr(self, variable)&#10;&#10;            for adjustment in adjustments:&#10;                setattr(self, variable, original_value + adjustment)&#10;                try:&#10;                    adjusted_value = self.calculate_intrinsic_value(years)&#10;                    percentage_change = ((adjusted_value - base_intrinsic_value) / base_intrinsic_value) * 100&#10;                    results.append({&#10;                        'adjustment': adjustment,&#10;                        'intrinsic_value': adjusted_value,&#10;                        'percentage_change': percentage_change&#10;                    })&#10;                except ValueError:&#10;                    results.append({&#10;                        'adjustment': adjustment,&#10;                        'intrinsic_value': 0,&#10;                        'percentage_change': -100&#10;                    })&#10;&#10;            setattr(self, variable, original_value)&#10;            sensitivity_results[variable] = results&#10;&#10;        return sensitivity_results&#10;&#10;    def scenario_analysis(self, years=5):&#10;        &quot;&quot;&quot;&#10;        Execute scenario analysis with predefined parameter sets.&#10;&#10;        Generates Bear, Base, and Bull case valuations using systematic&#10;        parameter adjustments to model different market conditions.&#10;&#10;        Args:&#10;            years: DCF projection period&#10;&#10;        Returns:&#10;            Dictionary containing results for each scenario&#10;        &quot;&quot;&quot;&#10;        scenarios = {&#10;            'Bear Case': {&#10;                'growth_rate_adj': -0.02,&#10;                'wacc_adj': 0.01,&#10;                'terminal_growth_adj': -0.005&#10;            },&#10;            'Base Case': {&#10;                'growth_rate_adj': 0,&#10;                'wacc_adj': 0,&#10;                'terminal_growth_adj': 0&#10;            },&#10;            'Bull Case': {&#10;                'growth_rate_adj': 0.02,&#10;                'wacc_adj': -0.005,&#10;                'terminal_growth_adj': 0.005&#10;            }&#10;        }&#10;&#10;        original_growth = self.growth_rate&#10;        original_wacc = self.wacc&#10;        original_terminal = self.terminal_growth_rate&#10;&#10;        scenario_results = {}&#10;&#10;        for scenario_name, adjustments in scenarios.items():&#10;            self.growth_rate = original_growth + adjustments['growth_rate_adj']&#10;            self.wacc = original_wacc + adjustments['wacc_adj']&#10;            self.terminal_growth_rate = original_terminal + adjustments['terminal_growth_adj']&#10;&#10;            try:&#10;                intrinsic_value = self.calculate_intrinsic_value(years)&#10;                current_price = self.calculate_implied_share_price()&#10;                upside = ((intrinsic_value - current_price) / current_price * 100) if current_price else 0&#10;&#10;                scenario_results[scenario_name] = {&#10;                    'intrinsic_value': intrinsic_value,&#10;                    'upside_percentage': upside,&#10;                    'growth_rate': self.growth_rate,&#10;                    'wacc': self.wacc,&#10;                    'terminal_growth_rate': self.terminal_growth_rate&#10;                }&#10;            except ValueError:&#10;                scenario_results[scenario_name] = {&#10;                    'intrinsic_value': 0,&#10;                    'upside_percentage': -100,&#10;                    'growth_rate': self.growth_rate,&#10;                    'wacc': self.wacc,&#10;                    'terminal_growth_rate': self.terminal_growth_rate,&#10;                    'error': 'Invalid parameter combination'&#10;                }&#10;&#10;        self.growth_rate = original_growth&#10;        self.wacc = original_wacc&#10;        self.terminal_growth_rate = original_terminal&#10;&#10;        return scenario_results&#10;&#10;    def calculate_equity_value(self):&#10;        &quot;&quot;&quot;Calculate equity value from enterprise value&quot;&quot;&quot;&#10;        return self.enterprise_value - self.debt + self.cash&#10;&#10;    def calculate_implied_share_price(self):&#10;        &quot;&quot;&quot;Calculate current implied share price&quot;&quot;&quot;&#10;        equity_value = self.calculate_equity_value()&#10;        return equity_value / self.shares_outstanding if self.shares_outstanding else 0&#10;&#10;    def project_free_cash_flows(self, years=5):&#10;        &quot;&quot;&quot;Project future free cash flows based on growth assumptions&quot;&quot;&quot;&#10;        projected_fcf = []&#10;        for year in range(1, years + 1):&#10;            fcf = self.last_fcf * (1 + self.growth_rate) ** year&#10;            projected_fcf.append(fcf)&#10;        return projected_fcf&#10;&#10;    def project_cash_flows(self, years=5):&#10;        &quot;&quot;&quot;&#10;        Project cash flows with detailed breakdown for web interface.&#10;&#10;        Returns dictionary with projected FCF and additional metrics for visualization.&#10;        &quot;&quot;&quot;&#10;        projected_fcf = self.project_free_cash_flows(years)&#10;&#10;        # Calculate present values for each year&#10;        present_values = []&#10;        for i, fcf in enumerate(projected_fcf):&#10;            pv = fcf / ((1 + self.wacc) ** (i + 1))&#10;            present_values.append(pv)&#10;&#10;        # Calculate terminal value&#10;        final_fcf = projected_fcf[-1] if projected_fcf else 0&#10;        terminal_value = 0&#10;        if final_fcf &gt; 0:&#10;            try:&#10;                terminal_value = self.calculate_terminal_value(final_fcf)&#10;            except ValueError:&#10;                terminal_value = 0&#10;&#10;        return {&#10;            'projected_fcf': projected_fcf,&#10;            'present_values': present_values,&#10;            'terminal_value': terminal_value,&#10;            'years': list(range(1, years + 1)),&#10;            'wacc': self.wacc,&#10;            'growth_rate': self.growth_rate,&#10;            'terminal_growth_rate': self.terminal_growth_rate&#10;        }&#10;&#10;    def calculate_terminal_value(self, final_fcf):&#10;        &quot;&quot;&quot;Calculate terminal value using Gordon Growth Model&quot;&quot;&quot;&#10;        denominator = self.wacc - self.terminal_growth_rate&#10;        if denominator &lt;= 0:&#10;            raise ValueError(&quot;WACC must exceed terminal growth rate for valid calculation&quot;)&#10;        return (final_fcf * (1 + self.terminal_growth_rate)) / denominator&#10;&#10;    def calculate_present_value(self, cash_flows, terminal_value):&#10;        &quot;&quot;&quot;Calculate present value of projected cash flows and terminal value&quot;&quot;&quot;&#10;        pv_fcf = sum(fcf / ((1 + self.wacc) ** (i + 1)) for i, fcf in enumerate(cash_flows))&#10;        pv_terminal_value = terminal_value / ((1 + self.wacc) ** len(cash_flows))&#10;        return pv_fcf + pv_terminal_value&#10;&#10;    def calculate_intrinsic_value(self, years=5):&#10;        &quot;&quot;&quot;&#10;        Calculate intrinsic value per share using DCF methodology.&#10;&#10;        Supports industry-specific model variations for specialized sectors&#10;        such as financial services, REITs, and utilities.&#10;        &quot;&quot;&quot;&#10;        projected_fcf = self.project_free_cash_flows(years)&#10;        if not projected_fcf:&#10;            return 0&#10;&#10;        final_fcf = projected_fcf[-1]&#10;        terminal_value = self.calculate_terminal_value(final_fcf)&#10;        intrinsic_enterprise_value = self.calculate_present_value(projected_fcf, terminal_value)&#10;        intrinsic_equity_value = intrinsic_enterprise_value - self.debt + self.cash&#10;&#10;        return intrinsic_equity_value / self.shares_outstanding if self.shares_outstanding else 0&#10;" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;Discounted Cash Flow Valuation Model&#10;&#10;Professional-grade DCF calculation engine implementing industry-standard&#10;methodologies for equity valuation with advanced sensitivity and scenario analysis.&#10;&#10;Copyright (c) 2024 DCF Valuation Tool&#10;Licensed under MIT License&#10;&quot;&quot;&quot;&#10;&#10;class DiscountedCashFlowModel:&#10;    &quot;&quot;&quot;&#10;    Enterprise-grade DCF valuation model with comprehensive analytics.&#10;&#10;    Implements standard DCF methodology with configurable parameters,&#10;    sensitivity analysis capabilities, and scenario modeling for&#10;    professional financial analysis.&#10;    &quot;&quot;&quot;&#10;&#10;    def __init__(self, enterprise_value, debt, cash, shares_outstanding, last_fcf,&#10;                 growth_rate, wacc, terminal_growth_rate, industry='N/A'):&#10;        &quot;&quot;&quot;&#10;        Initialize DCF model with company financial parameters.&#10;&#10;        Args:&#10;            enterprise_value: Current enterprise value in millions&#10;            debt: Total debt in millions&#10;            cash: Cash and equivalents in millions&#10;            shares_outstanding: Number of shares outstanding in millions&#10;            last_fcf: Last reported free cash flow in millions&#10;            growth_rate: Annual FCF growth rate (decimal)&#10;            wacc: Weighted average cost of capital (decimal)&#10;            terminal_growth_rate: Long-term growth rate (decimal)&#10;            industry: Company industry classification&#10;        &quot;&quot;&quot;&#10;        self.enterprise_value = enterprise_value&#10;        self.debt = debt&#10;        self.cash = cash&#10;        self.shares_outstanding = shares_outstanding&#10;        self.last_fcf = last_fcf&#10;        self.growth_rate = growth_rate&#10;        self.wacc = wacc&#10;        self.terminal_growth_rate = terminal_growth_rate&#10;        self.industry = industry&#10;&#10;    def calculate_intrinsic_value(self, years=5):&#10;        &quot;&quot;&quot;&#10;        Calculate intrinsic value per share using DCF methodology.&#10;        &#10;        Args:&#10;            years: Number of projection years&#10;            &#10;        Returns:&#10;            float: Intrinsic value per share&#10;        &quot;&quot;&quot;&#10;        projected_fcf = self._project_free_cash_flows(years)&#10;        if not projected_fcf:&#10;            return 0&#10;&#10;        final_fcf = projected_fcf[-1]&#10;        terminal_value = self._calculate_terminal_value(final_fcf)&#10;        intrinsic_enterprise_value = self._calculate_present_value(projected_fcf, terminal_value)&#10;        intrinsic_equity_value = intrinsic_enterprise_value - self.debt + self.cash&#10;&#10;        return intrinsic_equity_value / self.shares_outstanding if self.shares_outstanding else 0&#10;&#10;    def project_cash_flows(self, years=5):&#10;        &quot;&quot;&quot;&#10;        Project cash flows with detailed breakdown for web interface.&#10;        &#10;        Args:&#10;            years: Number of projection years&#10;            &#10;        Returns:&#10;            dict: Dictionary with projected FCF and additional metrics for visualization&#10;        &quot;&quot;&quot;&#10;        projected_fcf = self._project_free_cash_flows(years)&#10;        &#10;        # Calculate present values for each year&#10;        present_values = [&#10;            fcf / ((1 + self.wacc) ** (i + 1)) &#10;            for i, fcf in enumerate(projected_fcf)&#10;        ]&#10;        &#10;        # Calculate terminal value&#10;        final_fcf = projected_fcf[-1] if projected_fcf else 0&#10;        terminal_value = 0&#10;        if final_fcf &gt; 0:&#10;            try:&#10;                terminal_value = self._calculate_terminal_value(final_fcf)&#10;            except ValueError:&#10;                terminal_value = 0&#10;        &#10;        return {&#10;            'projected_fcf': projected_fcf,&#10;            'present_values': present_values,&#10;            'terminal_value': terminal_value,&#10;            'years': list(range(1, years + 1)),&#10;            'wacc': self.wacc,&#10;            'growth_rate': self.growth_rate,&#10;            'terminal_growth_rate': self.terminal_growth_rate&#10;        }&#10;&#10;    def sensitivity_analysis(self, years=5, variable_ranges=None):&#10;        &quot;&quot;&quot;&#10;        Conduct comprehensive sensitivity analysis on key valuation drivers.&#10;&#10;        Args:&#10;            years: DCF projection period&#10;            variable_ranges: Custom parameter adjustment ranges&#10;&#10;        Returns:&#10;            dict: Dictionary containing sensitivity results for each variable&#10;        &quot;&quot;&quot;&#10;        if variable_ranges is None:&#10;            variable_ranges = {&#10;                'growth_rate': [-0.02, -0.01, 0, 0.01, 0.02],&#10;                'wacc': [-0.01, -0.005, 0, 0.005, 0.01],&#10;                'terminal_growth_rate': [-0.005, -0.0025, 0, 0.0025, 0.005]&#10;            }&#10;&#10;        base_intrinsic_value = self.calculate_intrinsic_value(years)&#10;        sensitivity_results = {}&#10;&#10;        for variable, adjustments in variable_ranges.items():&#10;            results = []&#10;            original_value = getattr(self, variable)&#10;&#10;            for adjustment in adjustments:&#10;                setattr(self, variable, original_value + adjustment)&#10;                try:&#10;                    adjusted_value = self.calculate_intrinsic_value(years)&#10;                    percentage_change = ((adjusted_value - base_intrinsic_value) / base_intrinsic_value) * 100 if base_intrinsic_value else 0&#10;                    results.append({&#10;                        'adjustment': adjustment,&#10;                        'intrinsic_value': adjusted_value,&#10;                        'percentage_change': percentage_change&#10;                    })&#10;                except ValueError:&#10;                    results.append({&#10;                        'adjustment': adjustment,&#10;                        'intrinsic_value': 0,&#10;                        'percentage_change': -100&#10;                    })&#10;&#10;            setattr(self, variable, original_value)&#10;            sensitivity_results[variable] = results&#10;&#10;        return sensitivity_results&#10;&#10;    def scenario_analysis(self, years=5):&#10;        &quot;&quot;&quot;&#10;        Execute scenario analysis with predefined parameter sets.&#10;&#10;        Args:&#10;            years: DCF projection period&#10;&#10;        Returns:&#10;            dict: Dictionary containing results for each scenario&#10;        &quot;&quot;&quot;&#10;        scenarios = {&#10;            'Bear Case': {'growth_rate_adj': -0.02, 'wacc_adj': 0.01, 'terminal_growth_adj': -0.005},&#10;            'Base Case': {'growth_rate_adj': 0, 'wacc_adj': 0, 'terminal_growth_adj': 0},&#10;            'Bull Case': {'growth_rate_adj': 0.02, 'wacc_adj': -0.005, 'terminal_growth_adj': 0.005}&#10;        }&#10;&#10;        # Store original values&#10;        original_values = {&#10;            'growth_rate': self.growth_rate,&#10;            'wacc': self.wacc,&#10;            'terminal_growth_rate': self.terminal_growth_rate&#10;        }&#10;&#10;        scenario_results = {}&#10;&#10;        for scenario_name, adjustments in scenarios.items():&#10;            # Apply adjustments&#10;            self.growth_rate = original_values['growth_rate'] + adjustments['growth_rate_adj']&#10;            self.wacc = original_values['wacc'] + adjustments['wacc_adj']&#10;            self.terminal_growth_rate = original_values['terminal_growth_rate'] + adjustments['terminal_growth_adj']&#10;&#10;            try:&#10;                intrinsic_value = self.calculate_intrinsic_value(years)&#10;                current_price = self._calculate_implied_share_price()&#10;                upside = ((intrinsic_value - current_price) / current_price * 100) if current_price else 0&#10;&#10;                scenario_results[scenario_name] = {&#10;                    'intrinsic_value': intrinsic_value,&#10;                    'upside_percentage': upside,&#10;                    'growth_rate': self.growth_rate,&#10;                    'wacc': self.wacc,&#10;                    'terminal_growth_rate': self.terminal_growth_rate&#10;                }&#10;            except ValueError:&#10;                scenario_results[scenario_name] = {&#10;                    'intrinsic_value': 0,&#10;                    'upside_percentage': -100,&#10;                    'growth_rate': self.growth_rate,&#10;                    'wacc': self.wacc,&#10;                    'terminal_growth_rate': self.terminal_growth_rate,&#10;                    'error': 'Invalid parameter combination'&#10;                }&#10;&#10;        # Restore original values&#10;        for key, value in original_values.items():&#10;            setattr(self, key, value)&#10;&#10;        return scenario_results&#10;&#10;    def _project_free_cash_flows(self, years=5):&#10;        &quot;&quot;&quot;Project future free cash flows based on growth assumptions.&quot;&quot;&quot;&#10;        return [&#10;            self.last_fcf * (1 + self.growth_rate) ** year &#10;            for year in range(1, years + 1)&#10;        ]&#10;&#10;    def _calculate_terminal_value(self, final_fcf):&#10;        &quot;&quot;&quot;Calculate terminal value using Gordon Growth Model.&quot;&quot;&quot;&#10;        denominator = self.wacc - self.terminal_growth_rate&#10;        if denominator &lt;= 0:&#10;            raise ValueError(&quot;WACC must exceed terminal growth rate for valid calculation&quot;)&#10;        return (final_fcf * (1 + self.terminal_growth_rate)) / denominator&#10;&#10;    def _calculate_present_value(self, cash_flows, terminal_value):&#10;        &quot;&quot;&quot;Calculate present value of projected cash flows and terminal value.&quot;&quot;&quot;&#10;        pv_fcf = sum(fcf / ((1 + self.wacc) ** (i + 1)) for i, fcf in enumerate(cash_flows))&#10;        pv_terminal_value = terminal_value / ((1 + self.wacc) ** len(cash_flows))&#10;        return pv_fcf + pv_terminal_value&#10;&#10;    def _calculate_implied_share_price(self):&#10;        &quot;&quot;&quot;Calculate current implied share price.&quot;&quot;&quot;&#10;        equity_value = self.enterprise_value - self.debt + self.cash&#10;        return equity_value / self.shares_outstanding if self.shares_outstanding else 0" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/nginx.conf">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/nginx.conf" />
              <option name="updatedContent" value="# Nginx configuration for production deployment&#10;events {&#10;    worker_connections 1024;&#10;}&#10;&#10;http {&#10;    upstream dcf_app {&#10;        server dcf-webapp:5000;&#10;    }&#10;&#10;    server {&#10;        listen 80;&#10;        server_name localhost;&#10;&#10;        location / {&#10;            proxy_pass http://dcf_app;&#10;            proxy_set_header Host $host;&#10;            proxy_set_header X-Real-IP $remote_addr;&#10;            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;&#10;            proxy_set_header X-Forwarded-Proto $scheme;&#10;            proxy_connect_timeout 300;&#10;            proxy_send_timeout 300;&#10;            proxy_read_timeout 300;&#10;        }&#10;&#10;        location /static/ {&#10;            alias /app/static/;&#10;            expires 1y;&#10;            add_header Cache-Control &quot;public, immutable&quot;;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/requirements.txt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/requirements.txt" />
              <option name="originalContent" value="yfinance&#10;sv-ttk&#10;tkinterdnd2&#10;pandas&#10;numpy&#10;matplotlib&#10;seaborn" />
              <option name="updatedContent" value="flask&#13;&#10;gunicorn&#13;&#10;yfinance&#13;&#10;pandas&#13;&#10;numpy&#13;&#10;matplotlib&#13;&#10;seaborn" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/templates/404.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/templates/404.html" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Page Not Found - DCF Valuation Tool&lt;/title&gt;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;    &lt;style&gt;&#10;        body {&#10;            background-color: #1a1a1a;&#10;            color: #e0e0e0;&#10;            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;div class=&quot;container text-center mt-5&quot;&gt;&#10;        &lt;h1 class=&quot;display-1&quot;&gt;404&lt;/h1&gt;&#10;        &lt;h2&gt;Page Not Found&lt;/h2&gt;&#10;        &lt;p class=&quot;lead&quot;&gt;The page you're looking for doesn't exist.&lt;/p&gt;&#10;        &lt;a href=&quot;/&quot; class=&quot;btn btn-primary&quot;&gt;Return to DCF Tool&lt;/a&gt;&#10;    &lt;/div&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/templates/500.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/templates/500.html" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Server Error - DCF Valuation Tool&lt;/title&gt;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;    &lt;style&gt;&#10;        body {&#10;            background-color: #1a1a1a;&#10;            color: #e0e0e0;&#10;            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;div class=&quot;container text-center mt-5&quot;&gt;&#10;        &lt;h1 class=&quot;display-1&quot;&gt;500&lt;/h1&gt;&#10;        &lt;h2&gt;Internal Server Error&lt;/h2&gt;&#10;        &lt;p class=&quot;lead&quot;&gt;Something went wrong on our end. Please try again later.&lt;/p&gt;&#10;        &lt;a href=&quot;/&quot; class=&quot;btn btn-primary&quot;&gt;Return to DCF Tool&lt;/a&gt;&#10;    &lt;/div&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/templates/index.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/templates/index.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;DCF Valuation Tool - Professional Edition&lt;/title&gt;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;    &lt;link href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;    &lt;style&gt;&#10;        :root {&#10;            --primary-color: #2c3e50;&#10;            --secondary-color: #34495e;&#10;            --accent-color: #3498db;&#10;            --success-color: #27ae60;&#10;            --warning-color: #f39c12;&#10;            --danger-color: #e74c3c;&#10;        }&#10;&#10;        body {&#10;            background-color: #1a1a1a;&#10;            color: #e0e0e0;&#10;            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;&#10;        }&#10;&#10;        .navbar {&#10;            background-color: var(--primary-color) !important;&#10;            border-bottom: 2px solid var(--accent-color);&#10;        }&#10;&#10;        .card {&#10;            background-color: #2d2d2d;&#10;            border: 1px solid #444;&#10;            margin-bottom: 20px;&#10;        }&#10;&#10;        .card-body .form-label {&#10;            color: #ffffff;&#10;            font-weight: 500;&#10;        }&#10;&#10;        .card-header {&#10;            background-color: var(--secondary-color);&#10;            border-bottom: 1px solid #444;&#10;            color: #fff;&#10;        }&#10;&#10;        .form-control, .form-select {&#10;            background-color: #333;&#10;            border: 1px solid #555;&#10;            color: #e0e0e0;&#10;        }&#10;&#10;        .form-control:focus, .form-select:focus {&#10;            background-color: #333;&#10;            border-color: var(--accent-color);&#10;            color: #e0e0e0;&#10;            box-shadow: 0 0 0 0.2rem rgba(52, 152, 219, 0.25);&#10;        }&#10;&#10;        .btn-primary {&#10;            background-color: var(--accent-color);&#10;            border-color: var(--accent-color);&#10;        }&#10;&#10;        .btn-success {&#10;            background-color: var(--success-color);&#10;            border-color: var(--success-color);&#10;        }&#10;&#10;        .results-section {&#10;            display: none;&#10;        }&#10;&#10;        .chart-container {&#10;            background-color: #333;&#10;            border-radius: 8px;&#10;            padding: 15px;&#10;            margin-bottom: 20px;&#10;        }&#10;&#10;        .loading {&#10;            display: none;&#10;        }&#10;&#10;        .spinner-border {&#10;            color: var(--accent-color);&#10;        }&#10;&#10;        .alert-dark {&#10;            background-color: #2d2d2d;&#10;            border-color: #444;&#10;            color: #e0e0e0;&#10;        }&#10;        .alert-dark {&#10;            background-color: #2d2d2d;&#10;            border-color: #444;&#10;            color: #e0e0e0;&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;nav class=&quot;navbar navbar-expand-lg navbar-dark&quot;&gt;&#10;        &lt;div class=&quot;container&quot;&gt;&#10;            &lt;span class=&quot;navbar-brand mb-0 h1&quot;&gt;&#10;                &lt;i class=&quot;fas fa-chart-line me-2&quot;&gt;&lt;/i&gt;&#10;                DCF Valuation Tool - Professional Edition&#10;            &lt;/span&gt;&#10;        &lt;/div&gt;&#10;    &lt;/nav&gt;&#10;&#10;    &lt;div class=&quot;container mt-4&quot;&gt;&#10;        &lt;div class=&quot;row&quot;&gt;&#10;            &lt;!-- Control Panel --&gt;&#10;            &lt;div class=&quot;col-lg-4&quot;&gt;&#10;                &lt;!-- Data Input Section --&gt;&#10;                &lt;div class=&quot;card&quot;&gt;&#10;                    &lt;div class=&quot;card-header&quot;&gt;&#10;                        &lt;h5 class=&quot;mb-0&quot;&gt;&lt;i class=&quot;fas fa-download me-2&quot;&gt;&lt;/i&gt;Data Input&lt;/h5&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;card-body&quot;&gt;&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;label for=&quot;ticker&quot; class=&quot;form-label&quot;&gt;Yahoo Finance Ticker:&lt;/label&gt;&#10;                            &lt;div class=&quot;input-group&quot;&gt;&#10;                                &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;ticker&quot; value=&quot;AAPL&quot; placeholder=&quot;e.g., AAPL&quot;&gt;&#10;                                &lt;button class=&quot;btn btn-primary&quot; type=&quot;button&quot; id=&quot;fetchBtn&quot;&gt;&#10;                                    &lt;i class=&quot;fas fa-sync-alt me-1&quot;&gt;&lt;/i&gt;Fetch Data&#10;                                &lt;/button&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;loading text-center&quot;&gt;&#10;                            &lt;div class=&quot;spinner-border&quot; role=&quot;status&quot;&gt;&#10;                                &lt;span class=&quot;visually-hidden&quot;&gt;Loading...&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;p class=&quot;mt-2&quot;&gt;Fetching financial data...&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;!-- DCF Parameters --&gt;&#10;                &lt;div class=&quot;card&quot;&gt;&#10;                    &lt;div class=&quot;card-header&quot;&gt;&#10;                        &lt;h5 class=&quot;mb-0&quot;&gt;&lt;i class=&quot;fas fa-cogs me-2&quot;&gt;&lt;/i&gt;DCF Parameters&lt;/h5&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;card-body&quot;&gt;&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;label for=&quot;enterpriseValue&quot; class=&quot;form-label&quot;&gt;Enterprise Value (M):&lt;/label&gt;&#10;                            &lt;input type=&quot;number&quot; class=&quot;form-control&quot; id=&quot;enterpriseValue&quot; step=&quot;0.01&quot;&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;label for=&quot;debt&quot; class=&quot;form-label&quot;&gt;Total Debt (M):&lt;/label&gt;&#10;                            &lt;input type=&quot;number&quot; class=&quot;form-control&quot; id=&quot;debt&quot; step=&quot;0.01&quot;&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;label for=&quot;cash&quot; class=&quot;form-label&quot;&gt;Cash &amp; Equivalents (M):&lt;/label&gt;&#10;                            &lt;input type=&quot;number&quot; class=&quot;form-control&quot; id=&quot;cash&quot; step=&quot;0.01&quot;&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;label for=&quot;sharesOutstanding&quot; class=&quot;form-label&quot;&gt;Shares Outstanding (M):&lt;/label&gt;&#10;                            &lt;input type=&quot;number&quot; class=&quot;form-control&quot; id=&quot;sharesOutstanding&quot; step=&quot;0.01&quot;&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;label for=&quot;lastFcf&quot; class=&quot;form-label&quot;&gt;Last FCF (M):&lt;/label&gt;&#10;                            &lt;input type=&quot;number&quot; class=&quot;form-control&quot; id=&quot;lastFcf&quot; step=&quot;0.01&quot;&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;label for=&quot;growthRate&quot; class=&quot;form-label&quot;&gt;FCF Growth Rate (%):&lt;/label&gt;&#10;                            &lt;input type=&quot;number&quot; class=&quot;form-control&quot; id=&quot;growthRate&quot; value=&quot;5&quot; step=&quot;0.1&quot;&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;label for=&quot;wacc&quot; class=&quot;form-label&quot;&gt;WACC (%):&lt;/label&gt;&#10;                            &lt;input type=&quot;number&quot; class=&quot;form-control&quot; id=&quot;wacc&quot; value=&quot;8&quot; step=&quot;0.1&quot;&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;label for=&quot;terminalGrowthRate&quot; class=&quot;form-label&quot;&gt;Terminal Growth Rate (%):&lt;/label&gt;&#10;                            &lt;input type=&quot;number&quot; class=&quot;form-control&quot; id=&quot;terminalGrowthRate&quot; value=&quot;2&quot; step=&quot;0.1&quot;&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;!-- Analysis Configuration --&gt;&#10;                &lt;div class=&quot;card&quot;&gt;&#10;                    &lt;div class=&quot;card-header&quot;&gt;&#10;                        &lt;h5 class=&quot;mb-0&quot;&gt;&lt;i class=&quot;fas fa-calculator me-2&quot;&gt;&lt;/i&gt;Analysis&lt;/h5&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;card-body&quot;&gt;&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;label for=&quot;projectionYears&quot; class=&quot;form-label&quot;&gt;Projection Years: &lt;span id=&quot;yearsDisplay&quot;&gt;5&lt;/span&gt;&lt;/label&gt;&#10;                            &lt;input type=&quot;range&quot; class=&quot;form-range&quot; id=&quot;projectionYears&quot; min=&quot;3&quot; max=&quot;10&quot; value=&quot;5&quot;&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;button class=&quot;btn btn-success w-100&quot; id=&quot;calculateBtn&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-chart-line me-1&quot;&gt;&lt;/i&gt;Calculate DCF&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- Results Panel --&gt;&#10;            &lt;div class=&quot;col-lg-8&quot;&gt;&#10;                &lt;div class=&quot;results-section&quot; id=&quot;resultsSection&quot;&gt;&#10;                    &lt;!-- Summary Results --&gt;&#10;                    &lt;div class=&quot;card&quot;&gt;&#10;                        &lt;div class=&quot;card-header&quot;&gt;&#10;                            &lt;h5 class=&quot;mb-0&quot;&gt;&lt;i class=&quot;fas fa-chart-bar me-2&quot;&gt;&lt;/i&gt;Valuation Results&lt;/h5&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;card-body&quot;&gt;&#10;                            &lt;div class=&quot;row&quot;&gt;&#10;                                &lt;div class=&quot;col-md-6&quot;&gt;&#10;                                    &lt;div class=&quot;alert alert-dark&quot;&gt;&#10;                                        &lt;h6&gt;Intrinsic Value per Share&lt;/h6&gt;&#10;                                        &lt;h3 class=&quot;text-success&quot; id=&quot;intrinsicValue&quot;&gt;$0.00&lt;/h3&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;col-md-6&quot;&gt;&#10;                                    &lt;div class=&quot;alert alert-dark&quot;&gt;&#10;                                        &lt;h6&gt;Current Market Price&lt;/h6&gt;&#10;                                        &lt;h3 class=&quot;text-info&quot; id=&quot;marketPrice&quot;&gt;$0.00&lt;/h3&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;!-- Charts --&gt;&#10;                    &lt;div class=&quot;card&quot;&gt;&#10;                        &lt;div class=&quot;card-header&quot;&gt;&#10;                            &lt;h5 class=&quot;mb-0&quot;&gt;&lt;i class=&quot;fas fa-chart-area me-2&quot;&gt;&lt;/i&gt;Analysis Charts&lt;/h5&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;card-body&quot;&gt;&#10;                            &lt;div class=&quot;chart-container&quot; id=&quot;projectionsChart&quot;&gt;&lt;/div&gt;&#10;                            &lt;div class=&quot;chart-container&quot; id=&quot;sensitivityChart&quot;&gt;&lt;/div&gt;&#10;                            &lt;div class=&quot;chart-container&quot; id=&quot;scenariosChart&quot;&gt;&lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        // Update projection years display&#10;        document.getElementById('projectionYears').addEventListener('input', function() {&#10;            document.getElementById('yearsDisplay').textContent = this.value;&#10;        });&#10;&#10;        // Fetch data functionality&#10;        document.getElementById('fetchBtn').addEventListener('click', function() {&#10;            const ticker = document.getElementById('ticker').value.trim();&#10;            if (!ticker) {&#10;                alert('Please enter a ticker symbol');&#10;                return;&#10;            }&#10;&#10;            const loading = document.querySelector('.loading');&#10;            const btn = this;&#10;&#10;            loading.style.display = 'block';&#10;            btn.disabled = true;&#10;&#10;            fetch('/api/fetch-data', {&#10;                method: 'POST',&#10;                headers: {&#10;                    'Content-Type': 'application/json',&#10;                },&#10;                body: JSON.stringify({ ticker: ticker })&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.success) {&#10;                    populateFields(data.data);&#10;                } else {&#10;                    alert('Error: ' + data.error);&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                alert('Error fetching data: ' + error.message);&#10;            })&#10;            .finally(() =&gt; {&#10;                loading.style.display = 'none';&#10;                btn.disabled = false;&#10;            });&#10;        });&#10;&#10;        // Calculate DCF functionality&#10;        document.getElementById('calculateBtn').addEventListener('click', function() {&#10;            const params = gatherParameters();&#10;            const btn = this;&#10;&#10;            btn.disabled = true;&#10;            btn.innerHTML = '&lt;i class=&quot;fas fa-spinner fa-spin me-1&quot;&gt;&lt;/i&gt;Calculating...';&#10;&#10;            fetch('/api/calculate-dcf', {&#10;                method: 'POST',&#10;                headers: {&#10;                    'Content-Type': 'application/json',&#10;                },&#10;                body: JSON.stringify(params)&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.success) {&#10;                    displayResults(data.results);&#10;                    generateCharts(data.results);&#10;                } else {&#10;                    alert('Error: ' + data.error);&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                alert('Error calculating DCF: ' + error.message);&#10;            })&#10;            .finally(() =&gt; {&#10;                btn.disabled = false;&#10;                btn.innerHTML = '&lt;i class=&quot;fas fa-chart-line me-1&quot;&gt;&lt;/i&gt;Calculate DCF';&#10;            });&#10;        });&#10;&#10;        function populateFields(data) {&#10;            document.getElementById('enterpriseValue').value = data.enterprise_value || 0;&#10;            document.getElementById('debt').value = data.debt || 0;&#10;            document.getElementById('cash').value = data.cash || 0;&#10;            document.getElementById('sharesOutstanding').value = data.shares_outstanding || 0;&#10;            document.getElementById('lastFcf').value = data.last_fcf || 0;&#10;            document.getElementById('growthRate').value = data.growth_rate || 5;&#10;            document.getElementById('wacc').value = data.wacc || 8;&#10;        }&#10;&#10;        function gatherParameters() {&#10;            return {&#10;                enterprise_value: parseFloat(document.getElementById('enterpriseValue').value) || 0,&#10;                debt: parseFloat(document.getElementById('debt').value) || 0,&#10;                cash: parseFloat(document.getElementById('cash').value) || 0,&#10;                shares_outstanding: parseFloat(document.getElementById('sharesOutstanding').value) || 0,&#10;                last_fcf: parseFloat(document.getElementById('lastFcf').value) || 0,&#10;                growth_rate: parseFloat(document.getElementById('growthRate').value) || 5,&#10;                wacc: parseFloat(document.getElementById('wacc').value) || 8,&#10;                terminal_growth_rate: parseFloat(document.getElementById('terminalGrowthRate').value) || 2,&#10;                projection_years: parseInt(document.getElementById('projectionYears').value) || 5,&#10;                industry: 'Technology'&#10;            };&#10;        }&#10;&#10;        function displayResults(results) {&#10;            document.getElementById('intrinsicValue').textContent = '$' + results.intrinsic_value.toFixed(2);&#10;            document.getElementById('resultsSection').style.display = 'block';&#10;        }&#10;&#10;        function generateCharts(results) {&#10;            fetch('/api/generate-charts', {&#10;                method: 'POST',&#10;                headers: {&#10;                    'Content-Type': 'application/json',&#10;                },&#10;                body: JSON.stringify(results)&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.success) {&#10;                    displayCharts(data.charts);&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Error generating charts:', error);&#10;            });&#10;        }&#10;&#10;        function displayCharts(charts) {&#10;            if (charts.projections) {&#10;                document.getElementById('projectionsChart').innerHTML =&#10;                    '&lt;img src=&quot;data:image/png;base64,' + charts.projections + '&quot; class=&quot;img-fluid&quot; alt=&quot;Projections Chart&quot;&gt;';&#10;            }&#10;            if (charts.sensitivity) {&#10;                document.getElementById('sensitivityChart').innerHTML =&#10;                    '&lt;img src=&quot;data:image/png;base64,' + charts.sensitivity + '&quot; class=&quot;img-fluid&quot; alt=&quot;Sensitivity Chart&quot;&gt;';&#10;            }&#10;            if (charts.scenarios) {&#10;                document.getElementById('scenariosChart').innerHTML =&#10;                    '&lt;img src=&quot;data:image/png;base64,' + charts.scenarios + '&quot; class=&quot;img-fluid&quot; alt=&quot;Scenarios Chart&quot;&gt;';&#10;            }&#10;        }&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;DCF Valuation Tool - Professional Edition&lt;/title&gt;&#10;    &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;    &lt;link href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;    &lt;style&gt;&#10;        :root {&#10;            --primary-color: #2c3e50;&#10;            --secondary-color: #34495e;&#10;            --accent-color: #3498db;&#10;            --success-color: #27ae60;&#10;            --warning-color: #f39c12;&#10;            --danger-color: #e74c3c;&#10;        }&#10;&#10;        body {&#10;            background-color: #1a1a1a;&#10;            color: #e0e0e0;&#10;            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;&#10;        }&#10;&#10;        .navbar {&#10;            background-color: var(--primary-color) !important;&#10;            border-bottom: 2px solid var(--accent-color);&#10;        }&#10;&#10;        .card {&#10;            background-color: #2d2d2d;&#10;            border: 1px solid #444;&#10;            margin-bottom: 20px;&#10;        }&#10;&#10;        .card-body .form-label {&#10;            color: #ffffff;&#10;            font-weight: 500;&#10;        }&#10;&#10;        .card-header {&#10;            background-color: var(--secondary-color);&#10;            border-bottom: 1px solid #444;&#10;            color: #fff;&#10;        }&#10;&#10;        .form-control, .form-select {&#10;            background-color: #333;&#10;            border: 1px solid #555;&#10;            color: #e0e0e0;&#10;        }&#10;&#10;        .form-control:focus, .form-select:focus {&#10;            background-color: #333;&#10;            border-color: var(--accent-color);&#10;            color: #e0e0e0;&#10;            box-shadow: 0 0 0 0.2rem rgba(52, 152, 219, 0.25);&#10;        }&#10;&#10;        .btn-primary {&#10;            background-color: var(--accent-color);&#10;            border-color: var(--accent-color);&#10;        }&#10;&#10;        .btn-success {&#10;            background-color: var(--success-color);&#10;            border-color: var(--success-color);&#10;        }&#10;&#10;        .results-section {&#10;            display: none;&#10;        }&#10;&#10;        .chart-container {&#10;            background-color: #333;&#10;            border-radius: 8px;&#10;            padding: 15px;&#10;            margin-bottom: 20px;&#10;        }&#10;&#10;        .loading {&#10;            display: none;&#10;        }&#10;&#10;        .spinner-border {&#10;            color: var(--accent-color);&#10;        }&#10;&#10;        .alert-dark {&#10;            background-color: #2d2d2d;&#10;            border-color: #444;&#10;            color: #e0e0e0;&#10;        }&#10;        .alert-dark {&#10;            background-color: #2d2d2d;&#10;            border-color: #444;&#10;            color: #e0e0e0;&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;nav class=&quot;navbar navbar-expand-lg navbar-dark&quot;&gt;&#10;        &lt;div class=&quot;container&quot;&gt;&#10;            &lt;span class=&quot;navbar-brand mb-0 h1&quot;&gt;&#10;                &lt;i class=&quot;fas fa-chart-line me-2&quot;&gt;&lt;/i&gt;&#10;                DCF Valuation Tool - Professional Edition&#10;            &lt;/span&gt;&#10;        &lt;/div&gt;&#10;    &lt;/nav&gt;&#10;&#10;    &lt;div class=&quot;container mt-4&quot;&gt;&#10;        &lt;div class=&quot;row&quot;&gt;&#10;            &lt;!-- Control Panel --&gt;&#10;            &lt;div class=&quot;col-lg-4&quot;&gt;&#10;                &lt;!-- Data Input Section --&gt;&#10;                &lt;div class=&quot;card&quot;&gt;&#10;                    &lt;div class=&quot;card-header&quot;&gt;&#10;                        &lt;h5 class=&quot;mb-0&quot;&gt;&lt;i class=&quot;fas fa-download me-2&quot;&gt;&lt;/i&gt;Data Input&lt;/h5&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;card-body&quot;&gt;&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;label for=&quot;ticker&quot; class=&quot;form-label&quot;&gt;Yahoo Finance Ticker:&lt;/label&gt;&#10;                            &lt;div class=&quot;input-group&quot;&gt;&#10;                                &lt;input type=&quot;text&quot; class=&quot;form-control&quot; id=&quot;ticker&quot; value=&quot;AAPL&quot; placeholder=&quot;e.g., AAPL&quot;&gt;&#10;                                &lt;button class=&quot;btn btn-primary&quot; type=&quot;button&quot; id=&quot;fetchBtn&quot;&gt;&#10;                                    &lt;i class=&quot;fas fa-sync-alt me-1&quot;&gt;&lt;/i&gt;Fetch Data&#10;                                &lt;/button&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;loading text-center&quot;&gt;&#10;                            &lt;div class=&quot;spinner-border&quot; role=&quot;status&quot;&gt;&#10;                                &lt;span class=&quot;visually-hidden&quot;&gt;Loading...&lt;/span&gt;&#10;                            &lt;/div&gt;&#10;                            &lt;p class=&quot;mt-2&quot;&gt;Fetching financial data...&lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;!-- DCF Parameters --&gt;&#10;                &lt;div class=&quot;card&quot;&gt;&#10;                    &lt;div class=&quot;card-header&quot;&gt;&#10;                        &lt;h5 class=&quot;mb-0&quot;&gt;&lt;i class=&quot;fas fa-cogs me-2&quot;&gt;&lt;/i&gt;DCF Parameters&lt;/h5&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;card-body&quot;&gt;&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;label for=&quot;enterpriseValue&quot; class=&quot;form-label&quot;&gt;Enterprise Value (M):&lt;/label&gt;&#10;                            &lt;input type=&quot;number&quot; class=&quot;form-control&quot; id=&quot;enterpriseValue&quot; step=&quot;0.01&quot;&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;label for=&quot;debt&quot; class=&quot;form-label&quot;&gt;Total Debt (M):&lt;/label&gt;&#10;                            &lt;input type=&quot;number&quot; class=&quot;form-control&quot; id=&quot;debt&quot; step=&quot;0.01&quot;&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;label for=&quot;cash&quot; class=&quot;form-label&quot;&gt;Cash &amp; Equivalents (M):&lt;/label&gt;&#10;                            &lt;input type=&quot;number&quot; class=&quot;form-control&quot; id=&quot;cash&quot; step=&quot;0.01&quot;&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;label for=&quot;sharesOutstanding&quot; class=&quot;form-label&quot;&gt;Shares Outstanding (M):&lt;/label&gt;&#10;                            &lt;input type=&quot;number&quot; class=&quot;form-control&quot; id=&quot;sharesOutstanding&quot; step=&quot;0.01&quot;&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;label for=&quot;lastFcf&quot; class=&quot;form-label&quot;&gt;Last FCF (M):&lt;/label&gt;&#10;                            &lt;input type=&quot;number&quot; class=&quot;form-control&quot; id=&quot;lastFcf&quot; step=&quot;0.01&quot;&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;label for=&quot;growthRate&quot; class=&quot;form-label&quot;&gt;FCF Growth Rate (%):&lt;/label&gt;&#10;                            &lt;input type=&quot;number&quot; class=&quot;form-control&quot; id=&quot;growthRate&quot; value=&quot;5&quot; step=&quot;0.1&quot;&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;label for=&quot;wacc&quot; class=&quot;form-label&quot;&gt;WACC (%):&lt;/label&gt;&#10;                            &lt;input type=&quot;number&quot; class=&quot;form-control&quot; id=&quot;wacc&quot; value=&quot;8&quot; step=&quot;0.1&quot;&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;label for=&quot;terminalGrowthRate&quot; class=&quot;form-label&quot;&gt;Terminal Growth Rate (%):&lt;/label&gt;&#10;                            &lt;input type=&quot;number&quot; class=&quot;form-control&quot; id=&quot;terminalGrowthRate&quot; value=&quot;2&quot; step=&quot;0.1&quot;&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;!-- Analysis Configuration --&gt;&#10;                &lt;div class=&quot;card&quot;&gt;&#10;                    &lt;div class=&quot;card-header&quot;&gt;&#10;                        &lt;h5 class=&quot;mb-0&quot;&gt;&lt;i class=&quot;fas fa-calculator me-2&quot;&gt;&lt;/i&gt;Analysis&lt;/h5&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div class=&quot;card-body&quot;&gt;&#10;                        &lt;div class=&quot;mb-3&quot;&gt;&#10;                            &lt;label for=&quot;projectionYears&quot; class=&quot;form-label&quot;&gt;Projection Years: &lt;span id=&quot;yearsDisplay&quot;&gt;5&lt;/span&gt;&lt;/label&gt;&#10;                            &lt;input type=&quot;range&quot; class=&quot;form-range&quot; id=&quot;projectionYears&quot; min=&quot;3&quot; max=&quot;10&quot; value=&quot;5&quot;&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;button class=&quot;btn btn-success w-100&quot; id=&quot;calculateBtn&quot;&gt;&#10;                            &lt;i class=&quot;fas fa-chart-line me-1&quot;&gt;&lt;/i&gt;Calculate DCF&#10;                        &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;!-- Results Panel --&gt;&#10;            &lt;div class=&quot;col-lg-8&quot;&gt;&#10;                &lt;div class=&quot;results-section&quot; id=&quot;resultsSection&quot;&gt;&#10;                    &lt;!-- Summary Results --&gt;&#10;                    &lt;div class=&quot;card&quot;&gt;&#10;                        &lt;div class=&quot;card-header&quot;&gt;&#10;                            &lt;h5 class=&quot;mb-0&quot;&gt;&lt;i class=&quot;fas fa-chart-bar me-2&quot;&gt;&lt;/i&gt;Valuation Results&lt;/h5&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;card-body&quot;&gt;&#10;                            &lt;div class=&quot;row&quot;&gt;&#10;                                &lt;div class=&quot;col-md-6&quot;&gt;&#10;                                    &lt;div class=&quot;alert alert-dark&quot;&gt;&#10;                                        &lt;h6&gt;Intrinsic Value per Share&lt;/h6&gt;&#10;                                        &lt;h3 class=&quot;text-success&quot; id=&quot;intrinsicValue&quot;&gt;$0.00&lt;/h3&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                                &lt;div class=&quot;col-md-6&quot;&gt;&#10;                                    &lt;div class=&quot;alert alert-dark&quot;&gt;&#10;                                        &lt;h6&gt;Current Market Price&lt;/h6&gt;&#10;                                        &lt;h3 class=&quot;text-info&quot; id=&quot;marketPrice&quot;&gt;$0.00&lt;/h3&gt;&#10;                                    &lt;/div&gt;&#10;                                &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;!-- Charts --&gt;&#10;                    &lt;div class=&quot;card&quot;&gt;&#10;                        &lt;div class=&quot;card-header&quot;&gt;&#10;                            &lt;h5 class=&quot;mb-0&quot;&gt;&lt;i class=&quot;fas fa-chart-area me-2&quot;&gt;&lt;/i&gt;Analysis Charts&lt;/h5&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;div class=&quot;card-body&quot;&gt;&#10;                            &lt;div class=&quot;chart-container&quot; id=&quot;projectionsChart&quot;&gt;&lt;/div&gt;&#10;                            &lt;div class=&quot;chart-container&quot; id=&quot;sensitivityChart&quot;&gt;&lt;/div&gt;&#10;                            &lt;div class=&quot;chart-container&quot; id=&quot;scenariosChart&quot;&gt;&lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script&gt;&#10;        // Update projection years display&#10;        document.getElementById('projectionYears').addEventListener('input', function() {&#10;            document.getElementById('yearsDisplay').textContent = this.value;&#10;        });&#10;&#10;        // Fetch data functionality&#10;        document.getElementById('fetchBtn').addEventListener('click', function() {&#10;            const ticker = document.getElementById('ticker').value.trim();&#10;            if (!ticker) {&#10;                alert('Please enter a ticker symbol');&#10;                return;&#10;            }&#10;&#10;            const loading = document.querySelector('.loading');&#10;            const btn = this;&#10;&#10;            loading.style.display = 'block';&#10;            btn.disabled = true;&#10;&#10;            fetch('/api/fetch-data', {&#10;                method: 'POST',&#10;                headers: {&#10;                    'Content-Type': 'application/json',&#10;                },&#10;                body: JSON.stringify({ ticker: ticker })&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.success) {&#10;                    populateFields(data.data);&#10;                } else {&#10;                    alert('Error: ' + data.error);&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                alert('Error fetching data: ' + error.message);&#10;            })&#10;            .finally(() =&gt; {&#10;                loading.style.display = 'none';&#10;                btn.disabled = false;&#10;            });&#10;        });&#10;&#10;        // Calculate DCF functionality&#10;        document.getElementById('calculateBtn').addEventListener('click', function() {&#10;            const params = gatherParameters();&#10;            const btn = this;&#10;&#10;            btn.disabled = true;&#10;            btn.innerHTML = '&lt;i class=&quot;fas fa-spinner fa-spin me-1&quot;&gt;&lt;/i&gt;Calculating...';&#10;&#10;            fetch('/api/calculate-dcf', {&#10;                method: 'POST',&#10;                headers: {&#10;                    'Content-Type': 'application/json',&#10;                },&#10;                body: JSON.stringify(params)&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.success) {&#10;                    displayResults(data.results);&#10;                    generateCharts(data.results);&#10;                } else {&#10;                    alert('Error: ' + data.error);&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                alert('Error calculating DCF: ' + error.message);&#10;            })&#10;            .finally(() =&gt; {&#10;                btn.disabled = false;&#10;                btn.innerHTML = '&lt;i class=&quot;fas fa-chart-line me-1&quot;&gt;&lt;/i&gt;Calculate DCF';&#10;            });&#10;        });&#10;&#10;        function populateFields(data) {&#10;            document.getElementById('enterpriseValue').value = data.enterprise_value || 0;&#10;            document.getElementById('debt').value = data.debt || 0;&#10;            document.getElementById('cash').value = data.cash || 0;&#10;            document.getElementById('sharesOutstanding').value = data.shares_outstanding || 0;&#10;            document.getElementById('lastFcf').value = data.last_fcf || 0;&#10;            document.getElementById('growthRate').value = data.growth_rate || 5;&#10;            document.getElementById('wacc').value = data.wacc || 8;&#10;            &#10;            // Update current market price&#10;            if (data.current_price) {&#10;                document.getElementById('marketPrice').textContent = '$' + data.current_price.toFixed(2);&#10;            }&#10;        }&#10;&#10;        function gatherParameters() {&#10;            return {&#10;                enterprise_value: parseFloat(document.getElementById('enterpriseValue').value) || 0,&#10;                debt: parseFloat(document.getElementById('debt').value) || 0,&#10;                cash: parseFloat(document.getElementById('cash').value) || 0,&#10;                shares_outstanding: parseFloat(document.getElementById('sharesOutstanding').value) || 0,&#10;                last_fcf: parseFloat(document.getElementById('lastFcf').value) || 0,&#10;                growth_rate: parseFloat(document.getElementById('growthRate').value) || 5,&#10;                wacc: parseFloat(document.getElementById('wacc').value) || 8,&#10;                terminal_growth_rate: parseFloat(document.getElementById('terminalGrowthRate').value) || 2,&#10;                projection_years: parseInt(document.getElementById('projectionYears').value) || 5,&#10;                industry: 'Technology'&#10;            };&#10;        }&#10;&#10;        function displayResults(results) {&#10;            document.getElementById('intrinsicValue').textContent = '$' + results.intrinsic_value.toFixed(2);&#10;            document.getElementById('resultsSection').style.display = 'block';&#10;        }&#10;&#10;        function generateCharts(results) {&#10;            fetch('/api/generate-charts', {&#10;                method: 'POST',&#10;                headers: {&#10;                    'Content-Type': 'application/json',&#10;                },&#10;                body: JSON.stringify(results)&#10;            })&#10;            .then(response =&gt; response.json())&#10;            .then(data =&gt; {&#10;                if (data.success) {&#10;                    displayCharts(data.charts);&#10;                }&#10;            })&#10;            .catch(error =&gt; {&#10;                console.error('Error generating charts:', error);&#10;            });&#10;        }&#10;&#10;        function displayCharts(charts) {&#10;            if (charts.projections) {&#10;                document.getElementById('projectionsChart').innerHTML =&#10;                    '&lt;img src=&quot;data:image/png;base64,' + charts.projections + '&quot; class=&quot;img-fluid&quot; alt=&quot;Projections Chart&quot;&gt;';&#10;            }&#10;            if (charts.sensitivity) {&#10;                document.getElementById('sensitivityChart').innerHTML =&#10;                    '&lt;img src=&quot;data:image/png;base64,' + charts.sensitivity + '&quot; class=&quot;img-fluid&quot; alt=&quot;Sensitivity Chart&quot;&gt;';&#10;            }&#10;            if (charts.scenarios) {&#10;                document.getElementById('scenariosChart').innerHTML =&#10;                    '&lt;img src=&quot;data:image/png;base64,' + charts.scenarios + '&quot; class=&quot;img-fluid&quot; alt=&quot;Scenarios Chart&quot;&gt;';&#10;            }&#10;        }&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>